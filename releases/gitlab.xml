<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>GitLab Releases</title>
  <updated>2024-04-27T13:30:31.221589-04:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v16.7.0</id>
    <title>New release for GitLab: GitLab 16.7</title>
    <updated>2023-12-21T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="21 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=21&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2099 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2099&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[Add a Mastodon handle to your User Profile](https://docs.gitlab.com/ee/user/profile/#add-external-accounts-to-your-user-profile-page): &lt;code&gt;User Profile&lt;/code&gt;&lt;/summary&gt;

&gt; You can now list your Mastodon handle on the User Profile. With this enhancement we are now supporting a fediverse social network, which will help in advancing [ActivityPub for GitLab](https://gitlab.com/groups/gitlab-org/-/epics/11247).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Group descriptions extended to 500 characters](https://docs.gitlab.com/ee/user/group/#edit-group-name-and-description): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; Group descriptions can now contain up to 500 characters. If you try to save a group description with more than 500 characters, a warning message appears stating that the description is too long. Thanks to @freznicek for this community contribution!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Search bar more prominent on the search results page](https://docs.gitlab.com/ee/user/search/): &lt;code&gt;Global Search&lt;/code&gt;&lt;/summary&gt;

&gt; The search bar is now more prominent on the search results page. To increase the search bar visibility, the group and project filters have been moved to the left sidebar.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Beta support for OpenTofu](https://docs.gitlab.com/ee/user/infrastructure/iac/): &lt;code&gt;Infrastructure Cost Data&lt;/code&gt;&lt;/summary&gt;

&gt; If you're switching from Terraform to OpenTofu, this release of GitLab adds preliminary support for OpenTofu. Because OpenTofu is a fork of Terraform, the MR widget integration, module registry, and GitLab-managed Terraform state work by default. We added support for OpenTofu in the `gitlab-terraform` helper image to simplify the usage of the GitLab IaC offering.
&gt; 
&gt; GitLab continues to support Terraform for the MR widget, module registry, and GitLab-managed Terraform state.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Custom time period for access tokens rotation](https://docs.gitlab.com/ee/api/personal_access_tokens.html#rotate-a-personal-access-token): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; You can now optionally input a new parameter, `expires_at`, when rotating an access token. This allows you to create a custom expiry date for the token. Previously, each rotation extended the expiration one week from the previous expiry date. This new option provides flexibility in rotation interval. 

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Backups supports alternate compression libraries](https://docs.gitlab.com/ee/administration/backup_restore/backup_gitlab.html#backup-compression) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Backup/Restore of GitLab instances&lt;/code&gt;&lt;/summary&gt;

&gt; You can now override the default single-threaded gzip compression library with an alternate compression library of your choice for backups using the `COMPRESS_CMD` and `DECOMPRESS_CMD` commands. This allows you to leverage parallel compression libraries to speed up the compression stage of the backup by using the power of modern multi-core processors. The commands include support for passing options to the compression library allowing you to adjust parameters such as compression levels and speed.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/manage/"&gt;Manage&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Customize time format for display](https://docs.gitlab.com/ee/user/profile/preferences.html#customize-time-format): &lt;code&gt;Internationalization&lt;/code&gt;&lt;/summary&gt;

&gt; Until now, GitLab only displayed time in 12 hour format, which could not be changed.
&gt; 
&gt; From this release, thanks to the community contribution, you can customize the format used to display time in places like issue lists, overview pages or when setting your status.
&gt; You can display times as:
&gt; 
&gt;   - 12 hour format, for example `2:34 PM`.
&gt;   - 24 hour format, for example `14:34`.
&gt; 
&gt; Thanks to [Thorben Westerhuys](https://gitlab.com/n0rdlicht) for this [community contribution](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/130789)!
&gt; 
&gt; In the following milestone we will [audit all timestamps](https://gitlab.com/groups/gitlab-org/-/epics/12215) shown across the GitLab product to make them respect the setting.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Access the Admin Area from the left sidebar](https://docs.gitlab.com/ee/administration/admin_area.html): &lt;code&gt;Navigation &amp; Settings&lt;/code&gt;&lt;/summary&gt;

&gt; Administrators can now access the Admin Area in one step, by using a link at the bottom of the left sidebar. Previously, you had to select **Search or go to** and then select **Admin Area**. This change should save you time when accessing the Admin Area.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Remove hardcoded time limit for migrations to complete](https://docs.gitlab.com/ee/user/group/import/#limits): &lt;code&gt;Importers&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab groups and project migrations done by direct transfer can become stuck for various reasons. In the past, to avoid leaving these migrations in an incomplete state
&gt; indefinitely, GitLab periodically executed a worker to identify migrations that hadn't completed within 8 hours. GitLab marked these migrations as timed out.
&gt; 
&gt; For large organizations, the migration process can take longer than 8 hours, so this amount of time was not always sufficient to properly determine if a migration was stuck.
&gt; As a result, this worker might have incorrectly marked a migration as stuck.
&gt; 
&gt; In this milestone, instead of using an 8 hour time limit, GitLab now only marks the migration as stuck if the child workers stop working for 24 hours.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Comprehensive results of imports by direct transfer](https://docs.gitlab.com/ee/user/group/import/#review-results-of-the-import): &lt;code&gt;Importers&lt;/code&gt;&lt;/summary&gt;

&gt; Knowing how crucial for our users is to understand the results of the import process, in this milestone we further improved on information presented for imports by
&gt; direct transfer. We now display import status badges next to GitLab groups and projects on:
&gt; 
&gt; - The [page where you can select groups and projects to import](https://docs.gitlab.com/ee/user/group/import/index.html#select-the-groups-and-projects-to-import).
&gt; - The [page listing imported groups and projects](https://docs.gitlab.com/ee/user/group/import/index.html#group-import-history).
&gt; 
&gt; The import status badges are:
&gt; 
&gt; - **Not started**
&gt; - **Pending**
&gt; - **Importing**
&gt; - **Failed**
&gt; - **Timeout**
&gt; - **Cancelled**
&gt; - **Complete**
&gt; - **Partially completed**
&gt; 
&gt; The **Partially completed badge** was added in this release and identifies a completed import process that has some items (such as merge requests or issues) not imported. 
&gt; 
&gt; Groups that an import process was started for have a **View details** link that shows imported subgroups and projects for that particular group. From there, you can see
&gt; the list of items that couldn't be imported (if any) by clicking a **See failures** link. **See failures** was
&gt; [released in the last release](https://about.gitlab.com/releases/2023/11/16/gitlab-16-6-released/#comprehensive-list-of-items-that-failed-to-be-imported).
&gt; 
&gt; In this milestone we also improved navigation with the breadcrumbs between those pages.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/plan/"&gt;Plan&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Improvements to rich text editor](https://docs.gitlab.com/ee/user/rich_text_editor/): &lt;code&gt;Team Planning&lt;/code&gt;, &lt;code&gt;Portfolio Management&lt;/code&gt;&lt;/summary&gt;

&gt; In GitLab 16.2 we released the rich text editor as an alternative to the existing Markdown editing experience. The rich text editor provides a “what you see is what you get” editing experience and an extensible foundation on which we can build custom editing interfaces for things like diagrams, content embeds, media management, and more.
&gt; 
&gt; With GitLab 16.7, we've changed the rich text editor to match the behavior with our Markdown editing experience and fix reported bugs. We've [changed the sorting order in the labels autocomplete modal to be consistent between the Markdown and rich-text editor](https://gitlab.com/gitlab-org/gitlab/-/issues/419097), [addressed a bug in the options returned in the unassign quick action in the rich-text editor](https://gitlab.com/gitlab-org/gitlab/-/issues/420344), [added support for custom emojis](https://gitlab.com/gitlab-org/gitlab/-/issues/422958), and [updated the look and feel of the quick action selection dropdown to be consistent in the two editing experiences](https://gitlab.com/gitlab-org/gitlab/-/issues/406714), among other improvements.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Filter by predefined date ranges in Value Stream Analytics](https://docs.gitlab.com/ee/user/group/value_stream_analytics/#data-filters): &lt;code&gt;Value Stream Management&lt;/code&gt;&lt;/summary&gt;

&gt; The value stream analytics report now has a set of filter options for data in the last 30, 60, 90, or 180 days. These new filter options simplify the date selection process, making it more efficient and user-friendly to understand [where time is spent during the development lifecycle](https://about.gitlab.com/blog/2023/06/01/value-stream-total-time-chart/).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Use GitLab pages without a wildcard DNS](https://docs.gitlab.com/ee/administration/pages/#pages-domain-without-wildcard-dns) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Pages&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, to create a GitLab Pages project, you needed a domain formatted like name.example.io or name.pages.example.io. This requirement meant you had to set up wildcard DNS records and SSL/TLS certificates. In GitLab 16.7, you can set up a GitLab Pages project without a DNS wildcard. This feature is an experiment.
&gt; 
&gt; Removing the requirement for wildcard certificates eases administrative overhead associated with GitLab pages. Some customers can't use GitLab Pages because of organizational restrictions on wildcard DNS records or certificates.
&gt; 
&gt; We welcome feedback related to this feature in [issue 434372](https://gitlab.com/gitlab-org/gitlab/-/issues/434372).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/create/"&gt;Create&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Add custom emoji to groups](https://docs.gitlab.com/ee/user/emoji_reactions.html): &lt;code&gt;Code Review Workflow&lt;/code&gt;, &lt;code&gt;Team Planning&lt;/code&gt;&lt;/summary&gt;

&gt; Who doesn't love a good emoji to really express yourself? When commenting on items across GitLab, you've used our default set of emoji to add reactions, but sometimes those emoji just weren't enough to express your emotions.
&gt; Groups can now add custom emoji to use across their projects. Custom emoji allow you to express your true feelings and communicate more clearly with the rest of your team. We can't wait to see how you'll react next.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Notify me when any merge request needs approval](https://docs.gitlab.com/ee/user/profile/notifications.html#edit-notification-settings): &lt;code&gt;Code Review Workflow&lt;/code&gt;&lt;/summary&gt;

&gt; When your approval is required for a merge request, you need to be notified to take action. Some users only want notifications when their approval is required, which is typically done by adding a user by name to review the changes. However, some users want a notification for any merge request they are eligible to approve, _even if they aren't added by name as reviewers._
&gt; 
&gt; Enable the **Added as approver** custom notification level to trigger an email and to-do for each merge request you are eligible to approve. This helps you be aware of merge requests sooner in the process, and take action to get the proposal merged.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[`artifacts:public` CI/CD keyword now generally available](https://docs.gitlab.com/ee/ci/yaml/#artifactspublic): &lt;code&gt;Build Artifacts&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, the `artifacts:public` keyword was only available as a default disabled feature for self-managed instances. Now in GitLab 16.7 we've made the `artifacts:public` keyword generally available for all users. You can now use the `artifacts:public` keyword in CI/CD configuration files to control whether job artifacts should be publicly accessible.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Improved ability to keep the latest job artifacts](https://docs.gitlab.com/ee/ci/jobs/job_artifacts.html#keep-artifacts-from-most-recent-successful-jobs): &lt;code&gt;Build Artifacts&lt;/code&gt;&lt;/summary&gt;

&gt; In GitLab 13.0 we introduced the ability to keep the job artifacts from the most recent successful pipeline. Unfortunately, the feature also marked all [failed](https://gitlab.com/gitlab-org/gitlab/-/issues/266958) and [blocked](https://gitlab.com/gitlab-org/gitlab/-/issues/387087) pipelines as the latest pipeline regardless of whether they were the most recent or not. This led to a buildup of artifacts in storage which had to be deleted manually.
&gt; 
&gt; In GitLab 16.7 the bugs causing this unintended behavior are resolved. Job artifacts from failed and blocked pipelines are only kept if they are from the most recent pipeline, otherwise they will follow the `expire_in` configuration. Affected GitLab.com customers should see artifacts which were inadvertently kept now unlocked and removed after a new pipeline run.
&gt; 
&gt; The **Keep artifacts from most recent successful jobs** setting overrides the job's `artifacts: expire_in` configuration and can result in a large number of artifacts stored without expiry. If your pipelines create many large artifacts, they can fill up your project storage quota quickly. We recommend disabling this setting if this feature is not required.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[GitLab Runner 16.7](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We’re also releasing GitLab Runner 16.7 today! GitLab Runner is the lightweight, highly-scalable agent that runs your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; #### What's new:
&gt; 
&gt; - [Implement graceful shutdown for Docker executor](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/6359)
&gt; - [Dynamically create PVC volumes with storage classes for Kubernetes](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27835)
&gt; 
&gt; #### Bug Fixes:
&gt; 
&gt; - [allow_failure:exit codes unusable with custom executor because exit code is always 1](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/28658)
&gt; - [Add better handling of signals in the runner helper and build container for the Kubernetes executor](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/36996)
&gt; 
&gt; The list of all changes is in the GitLab Runner [CHANGELOG](https://gitlab.com/gitlab-org/gitlab-runner/blob/16-7-stable/CHANGELOG.md).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[GitLab Runner supports SLSA v1.0 statement](https://docs.gitlab.com/ee/ci/runners/configure_runners.html#artifact-provenance-metadata): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; Runners can now generate provenance metadata with a statement that adheres to [SLSA 1.0](https://slsa.dev/spec/v1.0/). To enable SLSA 1.0, set the `SLSA_PROVENANCE_SCHEMA_VERSION=v1` variable in the `.gitlab-ci.yml` file. The SLSA version 1.0 statement is planned to become the default version in GitLab 17.0.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[CI/CD Catalog - Beta release](https://docs.gitlab.com/ee/ci/components/#cicd-catalog): &lt;code&gt;Pipeline Composition&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab 16.7 sees the Beta release of the CI/CD catalog! The catalog is where you can search for [CI/CD components](https://docs.gitlab.com/ee/ci/components/) maintained by you, your organization, or the public community. This is the place where DevOps engineers come together to create, contribute, and share reusable pipeline configurations.
&gt; 
&gt; Unlike other methods of reusing CI/CD configuration, CI/CD components published in the catalog have an improved experience, and are easily added to your pipeline. We invite you to start testing this new and exciting feature! You can try out components that others have created and shared in the catalog, or create your own components and share them with everyone.
&gt; 
&gt; While this is our initial beta release of the feature, we continue to work on making the experience even better. Our goal is to make the CI/CD catalog a fundamental part of the GitLab CI/CD experience.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/monitor/"&gt;Monitor&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Reopen Service Desk issues when an external participant comments](https://docs.gitlab.com/ee/user/project/service_desk/configure.html#reopen-issues-when-an-external-participant-comments): &lt;code&gt;Service Desk&lt;/code&gt;&lt;/summary&gt;

&gt; You can now configure GitLab to reopen closed issues when an external participant adds
&gt; a new comment on an issue by email. This gives you full visibility into ongoing conversations,
&gt; even after an issue has been resolved. 
&gt; 
&gt; It also adds an internal comment that mentions the assignees of the issue and creates to-do
&gt; items for them. This way you can make sure you never miss a follow-up email again.

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v16.7.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v16.8.0</id>
    <title>New release for GitLab: GitLab 16.8</title>
    <updated>2024-01-18T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="7 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=7&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2106 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2106&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[Kubernetes 1.28 support](https://docs.gitlab.com/ee/user/clusters/agent/#supported-cluster-versions): &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; This release adds full support for Kubernetes version 1.28, released in August 2023. If you deploy your apps to Kubernetes, you can now upgrade your connected clusters to the most recent version and take advantage of all its features.
&gt; 
&gt; You can read more about our Kubernetes support policy and other supported Kubernetes versions.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Omnibus improvements](https://docs.gitlab.com/omnibus/) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Omnibus Package&lt;/code&gt;&lt;/summary&gt;

&gt; From GitLab 16.8, you can specify commands to generate configurations for the following services in the
&gt; `gitlab.rb` file so that plaintext passwords are not exposed:
&gt; 
&gt; - GitLab Kubernetes Agent Server
&gt; - GitLab Workhorse
&gt; - GitLab Exporter
&gt; 
&gt; This means plaintext passwords for Redis no longer need to be stored in `gitlab.rb`.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Enforce 2FA for GitLab administrators](https://docs.gitlab.com/ee/security/two_factor_authentication.html#enforce-2fa-for-administrator-users) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;User Management&lt;/code&gt;&lt;/summary&gt;

&gt; You can now enforce whether GitLab administrators are required to use two-factor authentication (2FA) in their self-managed instance. It is good security practice to use 2FA for all accounts, especially for privileged accounts like administrators. If this setting is enforced, and an administrator does not already use 2FA, they must set up 2FA on their next sign-in.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/create/"&gt;Create&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Smarter approval resets with `patch-id` support](https://docs.gitlab.com/ee/user/project/merge_requests/approvals/settings.html#remove-all-approvals-when-commits-are-added-to-the-source-branch): &lt;code&gt;Code Review Workflow&lt;/code&gt;&lt;/summary&gt;

&gt; To ensure all changes are reviewed and approved, it's common to remove all approvals when new commits are added to a merge request. However, rebases also unnecessarily invalidated existing approvals, even if the rebase introduced no new changes, requiring authors to seek re-approval.
&gt; 
&gt; Merge request approvals now align to a [`git-patch-id`](https://git-scm.com/docs/git-patch-id). It's a reasonably stable and reasonably unique identifier that enables smarter decisions about resetting approvals. By comparing the `patch-id` before and after the rebase, we can determine if new changes were introduced that should reset approvals and require a review.
&gt; 
&gt; If you have feedback about your experiences with resets now, let us know in [issue #435870](https://gitlab.com/gitlab-org/gitlab/-/issues/435870).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[View blame information directly in the file page](https://docs.gitlab.com/ee/user/project/repository/git_blame.html#view-blame-for-a-file): &lt;code&gt;Source Code Management&lt;/code&gt;&lt;/summary&gt;

&gt; In previous versions of GitLab, viewing file blame required you to access a different page. Now you can view the file blame information directly from the file page.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[GitLab Runner 16.8](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We're also releasing GitLab Runner 16.8 today! GitLab Runner is the lightweight, highly-scalable agent that runs your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; #### What's new:
&gt; 
&gt; - [Overwrite generated Kubernetes pod specifications - Beta ](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/29659)
&gt; 
&gt; #### Bug Fixes:
&gt; 
&gt; - [GitLab Runner authentication token exposed in the runner log file](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37224)
&gt; - [Registering multiple autoscaling runners results in a partial config.toml file](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37197)
&gt; - [Interrupt of the restore_cache helper task corrupts the cache](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/36988)
&gt; 
&gt; The list of all changes is in the GitLab Runner [CHANGELOG](https://gitlab.com/gitlab-org/gitlab-runner/blob/16-8-stable/CHANGELOG.md).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Predefined variables for merge request description](https://docs.gitlab.com/ee/ci/variables/predefined_variables.html#predefined-variables-for-merge-request-pipelines): &lt;code&gt;Secrets Management&lt;/code&gt;&lt;/summary&gt;

&gt; If you use automation to work with merge requests in CI/CD pipelines, you might have wanted an easier way to fetch a merge request's description without an API call. In GitLab 16.7 we introduced the `CI_MERGE_REQUEST_DESCRIPTION` predefined variable, making the description easily accessible in all jobs. In GitLab 16.8 we tweaked the behavior to truncate `CI_MERGE_REQUEST_DESCRIPTION` at 2700 characters, because very large descriptions can cause runner errors. You can check if the description was truncated with the newly introduced `CI_MERGE_REQUEST_DESCRIPTION_IS_TRUNCATED` predefined variable, which is set to `true` when the description was truncated.

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v16.8.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v16.9.0</id>
    <title>New release for GitLab: GitLab 16.9</title>
    <updated>2024-02-15T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="15 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=15&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2121 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2121&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[Allow users to cleanup partial resources from failed deployments](https://docs.gitlab.com/ee/ci/environments/#run-a-pipeline-job-when-environment-is-stopped): &lt;code&gt;Environment Management&lt;/code&gt;&lt;/summary&gt;

&gt; The Environment [`auto_stop_in`](https://docs.gitlab.com/ee/ci/yaml/#environmentauto_stop_in) functionality was updated to run the job from the last finished pipeline, instead of the last successful pipeline. This avoids edge cases where the auto stop job can not run because of not having any successful pipelines.
&gt; 
&gt; This behaviour might be considered a breaking change in some situations. The new behaviour is currently behind a feature flag, and will become the default in 17.0, and at the same time, we are going to deprecate the old behaviour to be removed from GitLab in 18.0. We recommend everyone to start transitioning or to configure the feature flag immediately to minimize the risks of the breaking change at the first 17.x upgrade.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Kubernetes 1.29 support](https://docs.gitlab.com/ee/user/clusters/agent/#supported-cluster-versions): &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; This release adds full support for Kubernetes version 1.29, released in December 2023. If you deploy your apps to Kubernetes, you can now upgrade your connected clusters to the most recent version and take advantage of all its features.
&gt; 
&gt; You can read more about our Kubernetes support policy and other supported Kubernetes versions.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Custom guidelines for managing group and project members](https://docs.gitlab.com/ee/administration/appearance.html#member-guidelines) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; Administrators can now add text guidelines that are visible to users with permissions to manage members on the **Members** page of a group or project. Administrators can access these guidelines in the **Appearance** section of the **Admin Area** settings.
&gt; 
&gt; Guidelines are helpful for teams that use external tooling to manage members of groups or projects. For instance, the guideline can link to predefined groups that users should use instead of managing membership for individual members.
&gt; 
&gt; Thank you @bufferoverflow for this community contribution!

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/manage/"&gt;Manage&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Show import stats for direct transfer](https://docs.gitlab.com/ee/user/group/import/index.html#review-results-of-the-import): &lt;code&gt;Importers&lt;/code&gt;&lt;/summary&gt;

&gt; Completed migrations of GitLab groups and projects by direct transfer have displayed badges (**Complete**, **Partially completed**, and **Failed**)
&gt; to inform users about the general end result of the migration. Users could also access a list of items that were not imported, by clicking on the **See failures** link.
&gt; 
&gt; However, for a partially-imported project, there was no quick way to understand how many items of each type were successfully imported and how many were not.
&gt; 
&gt; In this release, we added import results statistics for groups and projects. To access the statistics, select the **Details** link on the direct transfer history page.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[REST API support for the GitLab for Slack app](https://docs.gitlab.com/ee/api/integrations.html#gitlab-for-slack-app): &lt;code&gt;Integrations&lt;/code&gt;&lt;/summary&gt;

&gt; With this release, we've added REST API support for the GitLab for Slack app.
&gt; 
&gt; You cannot create a GitLab for Slack app from the API. Instead, you must [install the app](https://docs.gitlab.com/ee/user/project/integrations/gitlab_slack_application.html#install-the-gitlab-for-slack-app) from the GitLab UI. You can then retrieve the integration settings and update or disable the app for a project.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/plan/"&gt;Plan&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Rich text editor broader availability](https://docs.gitlab.com/ee/user/rich_text_editor/): &lt;code&gt;Team Planning&lt;/code&gt;, &lt;code&gt;Portfolio Management&lt;/code&gt;&lt;/summary&gt;

&gt; In GitLab 16.2, [we released](https://about.gitlab.com/releases/2023/07/22/gitlab-16-2-released/) the rich text editor as an alternative to the plain text editor. The rich text editor provides a "what you see is what you get" editing interface, and an extensible foundation for additional development. Until this release, however, the rich text editor was available only in issues, epics, and merge requests.
&gt; 
&gt; With GitLab 16.9, the rich text editor is now available in:
&gt; 
&gt; - [Requirements descriptions](https://gitlab.com/gitlab-org/gitlab/-/issues/407493)
&gt; - [Vulnerability findings](https://gitlab.com/gitlab-org/gitlab/-/issues/407491)
&gt; - [Release descriptions](https://gitlab.com/gitlab-org/gitlab/-/issues/407494)
&gt; - [Design notes](https://gitlab.com/gitlab-org/gitlab/-/issues/407505)
&gt; 
&gt; With improved access to the rich text editor, you can collaborate more efficiently and without previous Markdown experience.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/create/"&gt;Create&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Request changes on merge requests](https://docs.gitlab.com/ee/user/project/merge_requests/reviews/#submit-a-review): &lt;code&gt;Code Review Workflow&lt;/code&gt;&lt;/summary&gt;

&gt; The last part of reviewing a merge request is communicating the outcome. While approving was unambiguous, leaving comments was not. They required the author to read your comments, then determine if the comments were purely informational, or described needed changes. Now, when you complete your review, you can select from three options:
&gt; 
&gt;  - **Comment**: Submit general feedback without explicitly approving.
&gt;  - **Approve**: Submit feedback and approve the changes.
&gt;  - **Request changes**: Submit feedback that should be addressed before merging.
&gt; 
&gt; The sidebar now shows the outcome of your review next to your name. Currently, ending your review with **Request changes** doesn't block the merge request from being merged, but it provides extra context to other participants in the merge request. 
&gt; 
&gt; You can leave feedback about the **Request changes** feature in our [feedback issue](https://gitlab.com/gitlab-org/gitlab/-/issues/438573).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[GitLab Runner 16.9](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We’re also releasing GitLab Runner 16.9 today! GitLab Runner is the lightweight, highly-scalable agent that runs your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; #### What's new:
&gt; 
&gt; - [Make Kubernetes API retries configurable](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37349)
&gt; 
&gt; #### Bug Fixes:
&gt; 
&gt; - [Random warning: failed to remove ***: Directory not empty](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/3185)
&gt; 
&gt; The list of all changes is in the GitLab Runner [CHANGELOG](https://gitlab.com/gitlab-org/gitlab-runner/blob/16-9-stable/CHANGELOG.md).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Show MR link for branch based pipelines](https://docs.gitlab.com/ee/ci/pipelines/#view-pipelines): &lt;code&gt;Continuous Integration (CI)&lt;/code&gt;&lt;/summary&gt;

&gt; If you use branch pipelines, you can now quickly view and access the related merge requests from the pipeline details page.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Improvements to the CI/CD variables user interface](https://docs.gitlab.com/ee/ci/variables/): &lt;code&gt;Secrets Management&lt;/code&gt;&lt;/summary&gt;

&gt; In GitLab 16.9, we have released a series of improvements to the CI/CD variables user experience. We have improved the variables creation flow through changes including:
&gt; 
&gt; - [Improved validation when variable values do not meet the requirements](https://gitlab.com/gitlab-org/gitlab/-/issues/365934).
&gt; - [Help text during variable creation](https://gitlab.com/gitlab-org/gitlab/-/issues/410220).
&gt; - [Allow resizing of the value field in the variables form](https://gitlab.com/gitlab-org/gitlab/-/issues/434667).
&gt; 
&gt; Other improvements include a new, [optional description field for group and project variables](https://gitlab.com/gitlab-org/gitlab/-/issues/378938) to assist with the management of variables. We have also made it easier to [add or edit multiple variables](https://gitlab.com/gitlab-org/gitlab/-/issues/434666), lowering the friction in the software development workflow and enabling developers to perform their job more efficiently.
&gt; 
&gt; Your [feedback for these changes](https://gitlab.com/gitlab-org/gitlab/-/issues/441177) is always valued and appreciated.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Expanded options for auto-canceling pipelines](https://docs.gitlab.com/ee/ci/yaml/index.html#workflowauto_cancelon_new_commit): &lt;code&gt;Pipeline Composition&lt;/code&gt;&lt;/summary&gt;

&gt; Currently, to use the [auto-cancel redundant pipeline feature](https://docs.gitlab.com/ee/ci/pipelines/settings.html#auto-cancel-redundant-pipelines), you must set jobs that can be cancelled as [`interruptible: true`](https://docs.gitlab.com/ee/ci/yaml/index.html#interruptible) to determine whether or not a pipeline can be cancelled. But this only applies to jobs that are actively running when GitLab tries to cancel the pipeline. Any jobs that have not yet started (are in "pending" status) are also considered safe to cancel, regardless of their `interruptible` configuration.
&gt; 
&gt; This lack of flexibility hinders users who want more control over which exact jobs can be cancelled by the auto-cancel pipeline feature. To address this limitation, we are pleased to announce the introduction of the `auto_cancel:on_new_commit` keywords with more granular control over job cancellation. If the legacy behavior did not work for you, you now have the option to configure the pipeline to only cancel jobs that are explicitly set with `interruptible: true`, even if they haven't started yet. You can also set jobs to never be automatically cancelled.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/package/"&gt;Package&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Allow duplicate Terraform modules](https://docs.gitlab.com/ee/user/packages/terraform_module_registry/#allow-duplicate-terraform-modules): &lt;code&gt;Package Registry&lt;/code&gt;&lt;/summary&gt;

&gt; You can use the GitLab package registry to publish and download Terraform modules. By default, you cannot publish the same module name and version more than once per project.
&gt; 
&gt; However, you might want to allow duplicate uploads, especially for releases. In this release, GitLab expands the group setting for the package registry so you can allow or deny duplicate modules.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Validate Terraform modules from your group or subgroup](https://docs.gitlab.com/ee/user/packages/package_registry/#view-packages): &lt;code&gt;Package Registry&lt;/code&gt;&lt;/summary&gt;

&gt; When using the GitLab Terraform registry, it is important to have a cross-project view of all your modules. Until recently, the user interface has been available only at the project level. If your group had a complex structure, you might have had difficulty finding and validating your modules.
&gt; 
&gt; From GitLab 16.9, you can view all of your group and subgroup modules in GitLab. The increased visibility provides a better understanding of your registry, and decreases the likelihood of name collisions.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/secure/"&gt;Secure&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Updated SAST rules for higher-quality results](https://docs.gitlab.com/ee/user/application_security/sast/rules.html#important-rule-changes): &lt;code&gt;SAST&lt;/code&gt;&lt;/summary&gt;

&gt; We've updated more than 40 default GitLab SAST rules to:
&gt; 
&gt; - Increase true-positive results (correctly identified vulnerabilities) and reduce false-negative results (incorrectly identified vulnerabilities) by updating the detection logic rules for C#, Go, Java, JavaScript, and Python.
&gt; - Add [OWASP mappings](https://gitlab.com/gitlab-org/gitlab/-/issues/438561) for C#, Go, Java, and Python rules.
&gt; 
&gt; The rule changes are included in updated versions of the Semgrep-based GitLab SAST [analyzer](https://docs.gitlab.com/ee/user/application_security/sast/analyzers/).
&gt; This update is automatically applied on GitLab 16.0 or newer unless you've [pinned SAST analyzers to a specific version](https://docs.gitlab.com/ee/user/application_security/sast/#pinning-to-minor-image-version).
&gt; We're working on more SAST rule improvements in [epic 10907](https://gitlab.com/groups/gitlab-org/-/epics/10907).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/monitor/"&gt;Monitor&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Access GitLab usage data through the REST API](https://docs.gitlab.com/ee/api/usage_data.html#export-service-ping-data) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Application Instrumentation&lt;/code&gt;&lt;/summary&gt;

&gt; Self-managed users can now seamlessly access Service Ping data through a REST API connection, facilitating direct integration with downstream systems. This represents a significant improvement over the previous method of file download. The new approach offers self-managed users a more efficient and real-time means of conducting customized analysis and deriving specific insights from their GitLab usage data.

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v16.9.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v16.10.0</id>
    <title>New release for GitLab: GitLab 16.10</title>
    <updated>2024-03-21T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="18 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=18&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2139 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2139&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[GitLab chart improvements](https://docs.gitlab.com/charts/) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Cloud Native Installation&lt;/code&gt;&lt;/summary&gt;

&gt; In GitLab 16.10, we've removed support for installing GitLab on Kubernetes 1.24 and older. Kubernetes maintenance support of Kubernetes 1.24 ended
&gt; in July 2023.
&gt; 
&gt; GitLab 16.10 includes support for installing GitLab on Kubernetes 1.27. For more information, see our new [Kubernetes version support policy](https://handbook.gitlab.com/handbook/engineering/careers/matrix/infrastructure/core-platform/distribution/). Our goal is to support newer versions of
&gt; Kubernetes closer to their official release.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Omnibus improvements](https://docs.gitlab.com/omnibus/) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Omnibus Package&lt;/code&gt;&lt;/summary&gt;

&gt; Gitlab 16.10 introduces a new major version of Patroni, version 3.0.1. This version upgrade will require downtime. For more
&gt; information and instructions, see the
&gt; [16.10 section of our GitLab 16 changes page](https://docs.gitlab.com/ee/update/versions/gitlab_16_changes.html#16100).
&gt; 
&gt; GitLab 16.10 also includes a new version of Alertmanager, namely version 0.27. Most notably, this version includes the removal of API v1. For more information on this
&gt; release, see the [Alertmanager changelog](https://github.com/prometheus/alertmanager/blob/v0.27.0/CHANGELOG.md#0270--2024-02-28).
&gt; 
&gt; GitLab 16.10 also includes [Mattermost 9.5](https://docs.mattermost.com/deploy/mattermost-changelog.html#release-v9-5-extended-support-release).
&gt; Mattermost 9.5 includes various security updates and the deprecation of support for MySQL 5.7. Users on this version of MySQL must update.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Blocked users are excluded from the followers list](https://docs.gitlab.com/ee/user/profile/#follow-users): &lt;code&gt;User Profile&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, when a user who followed you was blocked, they still appeared in the followers list of your User Profile. From GitLab 16.10, blocked users are hidden from the followers list. If the user is unblocked, they will reappear in the followers list.
&gt; 
&gt; Thank you @SethFalco for this community contribution!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Filter groups by visibility in the REST API](https://docs.gitlab.com/ee/api/groups.html#list-groups): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; You can now filter groups by visibility in the [Groups API](https://docs.gitlab.com/ee/api/groups.html). You can use filtering to focus on groups with a specific visibility level, making it easier to audit GitLab implementations.
&gt; 
&gt; Thank you @imskr for this community contribution!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Manually refresh the dashboard for Kubernetes](https://docs.gitlab.com/ee/ci/environments/kubernetes_dashboard.html): &lt;code&gt;Environment Management&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab 16.10 adds a dedicated refresh feature to the dashboard for Kubernetes. Now you can manually fetch Kubernetes resource data, and ensure you have access to the most recent information about your clusters.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Improved environment details page](https://docs.gitlab.com/ee/ci/environments/): &lt;code&gt;Environment Management&lt;/code&gt;&lt;/summary&gt;

&gt; The environment details page is improved in GitLab 16.10. When you select an environment from the environment list, you can review up-to-date information about your deployments and connected Kubernetes clusters, all in one convenient layout.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Improved error message for authentication rate limit](https://docs.gitlab.com/ee/security/rate_limits.html#failed-authentication-ban-for-git-and-container-registry): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; When authenticating with GitLab, it is possible to hit the authentication attempt rate limit, such as when using a script. Previously, if you hit the authentication rate limit, a `403 Forbidden` message was returned, which did not explain why you are getting this error. We now return a more descriptive error message which tells you that you've hit the authentication rate limit.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Webhooks support mutual TLS](https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#configure-webhooks-to-support-mutual-tls) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; You can now configure webhooks to support mutual TLS. This configuration establishes the authenticity of the webhook source and enhances security. You configure the client certificate in PEM format, which is presented to the server during the TLS handshake. You can also protect the certificate with a PEM passphrase.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Sign-in page improvements](https://gitlab.com/gitlab-org/gitlab/-/issues/412845): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; The GitLab sign-in page has been refreshed with improvements that fix spacing issues, broken elements, and alignment. There is also additional support for dark mode, and a button to manage cookie preferences. The combination of these improvements gives a fresh look and improved functionality on the sign-in page.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/manage/"&gt;Manage&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Threaded notifications supported in Google Chat](https://docs.gitlab.com/ee/user/project/integrations/hangouts_chat.html): &lt;code&gt;Integrations&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, notifications sent from GitLab to a space in Google Chat could not be created as replies to specified threads.
&gt; With this release, threaded notifications are enabled by default in Google Chat for the same GitLab object (for example, an issue or merge request).
&gt; 
&gt; Thanks to [Robbie Demuth](https://gitlab.com/robbie-demuth) for [this community contribution](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/145187)!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Custom payload template for webhooks](https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#custom-webhook-template): &lt;code&gt;Webhooks&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, GitLab webhooks could send only specific JSON payloads, which meant the receiving endpoints had to understand the webhook format. To use those webhooks, you had to either use an app to specifically support GitLab or write your own endpoint.
&gt; 
&gt; With this release, you can set a custom payload template in the webhook configuration. The request body is rendered from the template with the data for the current event.
&gt; 
&gt; Thanks to [Niklas](https://gitlab.com/Taucher2003) for [this community contribution](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/142738)!

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/plan/"&gt;Plan&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Wiki templates](https://docs.gitlab.com/ee/user/project/wiki/index.html#wiki-page-templates): &lt;code&gt;Wiki&lt;/code&gt;&lt;/summary&gt;

&gt; This version of GitLab introduces all-new templates to the Wiki. Now, you can create templates to streamline creating new pages or modifying existing ones. Templates are wiki pages that are stored in the templates directory in the wiki repository.
&gt; 
&gt; With this enhancement, you can make your wiki page layouts more consistent, create or restructure pages faster, and ensure that information is presented clearly and coherently in your knowledge base.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Support domain-level redirects for GitLab Pages](https://docs.gitlab.com/ee/user/project/pages/redirects.html#domain-level-redirects): &lt;code&gt;Pages&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, GitLab focused on supporting simple redirect rules. In GitLab 14.3, we [introduced](https://gitlab.com/gitlab-org/gitlab-pages/-/merge_requests/458) support for splat and placeholder redirects.
&gt; 
&gt; From GitLab 16.10, GitLab Pages supports domain-level redirects. You can combine domain-level redirects with [splat rules](https://gitlab.com/gitlab-org/gitlab-pages/-/issues/601) to dynamically rewrite the URL path. This improvement helps prevent confusion and ensure that you can still find your information after a domain change, even if you use an old domain.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/create/"&gt;Create&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Automatically collapse generated files in merge requests](https://docs.gitlab.com/ee/user/project/merge_requests/changes.html#collapse-generated-files): &lt;code&gt;Code Review Workflow&lt;/code&gt;&lt;/summary&gt;

&gt; Merge requests can contain changes from users and automated processes or compilers. Files like `package-lock.json`, `Gopkg.lock`, and minified `js` and `css` files increase the number of files shown in a merge request review, and distract reviewers from the human-generated changes. Merge requests now display these files collapsed by default, to help:
&gt; 
&gt; - Focus reviewer attention on important changes, but enable a full review if desired.
&gt; - Reduce the amount of data needed to load the merge request, which might help larger merge requests perform better.
&gt; 
&gt; For examples of the file types that are collapsed by default, see the [documentation](https://docs.gitlab.com/ee/user/project/merge_requests/changes.html#collapse-generated-files). To collapse more files and file types in the merge request, specify them as `gitlab-generated` in your project's `.gitattributes` file.
&gt; 
&gt; You can leave feedback on this change in [issue 438727](https://gitlab.com/gitlab-org/gitlab/-/issues/438727).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Expanded checks in merge widget](https://docs.gitlab.com/ee/user/project/merge_requests/merge_when_pipeline_succeeds.html): &lt;code&gt;Code Review Workflow&lt;/code&gt;&lt;/summary&gt;

&gt; The merge widget explains clearly if your merge request is not mergeable, and why. Previously, only one merge blocker was displayed at a time. This increased review cycles and forced you to resolve problems individually, without knowing if more blockers remained.
&gt; 
&gt; When you view a merge request, the merge widget now gives you a comprehensive view of problems, both remaining and resolved. Now you can understand at a glance if multiple blockers exist, fix them all in a single iteration, and increase your confidence that no hidden blockers have been missed.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[GitLab Runner 16.10](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We're also releasing GitLab Runner 16.10 today! GitLab Runner is the lightweight, highly-scalable agent that runs your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; Bug fixes:
&gt; 
&gt; - [Memory leak when jobs are cancelled in the Runner Kubernetes executor](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27857)
&gt; 
&gt; The list of all changes is in the GitLab Runner [CHANGELOG](https://gitlab.com/gitlab-org/gitlab-runner/blob/16-10-stable/CHANGELOG.md).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Semantic versioning in the CI/CD catalog](https://docs.gitlab.com/ee/ci/components/#component-versions): &lt;code&gt;Pipeline Composition&lt;/code&gt;&lt;/summary&gt;

&gt; To enforce consistent behavior across published components, in GitLab 16.10 we will enforce Semantic versioning for components that are published to the CI/CD catalog. When publishing a component, the tag must follow the 3-digit semantic versioning standard (for example `1.0.0`).
&gt; 
&gt; When using a component with the `include: component` syntax, you should use the published semantic version. Using `~latest` continues to be supported, but it will always return the latest published version, so you must use it with caution as it could include breaking changes. Shorthand syntax is not supported, but it will be in an upcoming milestone.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/monitor/"&gt;Monitor&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Create Service Desk tickets from the UI and API](https://docs.gitlab.com/ee/user/project/service_desk/using_service_desk.html#create-a-service-desk-ticket-in-gitlab-ui): &lt;code&gt;Service Desk&lt;/code&gt;&lt;/summary&gt;

&gt; Now you can create Service Desk tickets from the UI and the API using the `/convert_to_ticket user@example.com` quick action on a regular issue.
&gt; 
&gt; Create a regular issue and add a comment with the `/convert_to_ticket user@example.com` quick action. The provided email address becomes the external author of the ticket. GitLab doesn't send the [default thank you email](https://docs.gitlab.com/ee/user/project/service_desk/configure.html#customize-emails-sent-to-the-requester). You can add a public comment on the ticket to let the external participant know that the ticket has been created.
&gt; 
&gt; Adding a Service Desk ticket using the API follows the same concept: Create an issue using the [Issues API](https://docs.gitlab.com/ee/api/issues.html#new-issue) and use the `issue_iid` to add a note with the quick action using the [Notes API](https://docs.gitlab.com/ee/api/notes.html#create-new-issue-note).

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v16.10.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v16.11.0</id>
    <title>New release for GitLab: GitLab 16.11</title>
    <updated>2024-04-18T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="19 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=19&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2158 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2158&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[Sidebar for metadata on the project overview page](https://docs.gitlab.com/ee/user/project/working_with_projects.html): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; We've redesigned the project overview page. Now you can find all of the project information and links in one sidebar rather than multiple areas.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Omnibus improvements](https://docs.gitlab.com/omnibus/) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Omnibus Package&lt;/code&gt;&lt;/summary&gt;

&gt; - In GitLab 17.0, the minimum-supported version of PostgreSQL will become 14. In preparation for this change, in GitLab 16.11 we have changed the
&gt;   `attempt_auto_pg_upgrade?` setting to `true`, which will attempt to automatically upgrade the version of PostgreSQL to 14.
&gt; 
&gt;   This process is the same as for last time we bumped the minimum-supported PostgreSQL version.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Updated project archiving functionality](https://docs.gitlab.com/ee/user/project/working_with_projects.html#archive-a-project): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; Now it's easier to identify archived projects in project lists. From 16.11, archived projects display an **Archived** badge in the **Archived** tab of the group overview. This badge is also part of the project title on the project overview page.
&gt; 
&gt; An alert message clarifies that archived projects are read-only. This message is visible on all project pages to ensure that this context is not lost even when working on sub-pages of the archived project.
&gt; 
&gt; In addition, when deleting a group, the confirmation modal now lists the number of archived projects to prevent accidental deletions.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Build step of Auto DevOps upgraded](https://docs.gitlab.com/ee/topics/autodevops/troubleshooting.html#builder-sunset-error): &lt;code&gt;Auto DevOps&lt;/code&gt;&lt;/summary&gt;

&gt; Because the `heroku/buildpacks:20` image used by the Auto Build component of Auto DevOps was deprecated upstream, we are moving to the `heroku/builder:20` image. 
&gt; 
&gt; This breaking change arrives outside a GitLab major release to accommodate a breaking change upstream. The upgrade is unlikely to break your pipelines. As a temporary workaround, you can also manually configure the `heroku/builder:20` image and [skip the builder sunset errors](https://docs.gitlab.com/ee/topics/autodevops/troubleshooting.html#skipping-errors).
&gt; 
&gt; Additionally, we're planning another major upgrade from `heroku/builder:20` to `heroku/builder:22` in GitLab 17.0.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Users list search and filter improvements](https://docs.gitlab.com/ee/administration/admin_area.html#administering-users) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; The Admin Area users page has been improved.
&gt; 
&gt; Previously, tabs horizontally spanned across the top of the users list, making it difficult to navigate to the desired filter.
&gt; 
&gt; Now, filters have been combined into the search box, making it much easier to search and filter users.
&gt; 
&gt; Thank you [Ivan Shtyrliaiev](https://www.linkedin.com/in/bahek2462774/) for your contribution!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Renew application secret with API](https://docs.gitlab.com/ee/api/applications.html#renew-an-application-secret) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; You can now use the Applications API to renew application secrets. Previously, you had to use the UI to do this. Now you can use the API to rotate secrets programatically.
&gt; 
&gt; Thank you [Phawin](https://gitlab.com/lifez) for your contribution!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[More username options](https://docs.gitlab.com/ee/user/profile/#change-your-username): &lt;code&gt;User Management&lt;/code&gt;&lt;/summary&gt;

&gt; Usernames can only include non-accented letters, digits, underscores (`_`), hyphens (`-`), and periods (`.`).
&gt; Usernames must not start with a hyphen (`-`), or end in a period (`.`), `.git`, or `.atom`.
&gt; 
&gt; Username validation now more accurately states this criteria. This improved validation means that you are clearer on your options when choosing your username.
&gt; 
&gt; Thank you [Justin Zeng](https://www.linkedin.com/in/jzeng88/) for your contribution!

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/manage/"&gt;Manage&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Custom webhook headers](https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#custom-headers): &lt;code&gt;Webhooks&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, GitLab webhooks did not support custom headers. This meant you could not use them with systems that accept authentication tokens from headers with specific names.
&gt; 
&gt; With this release, you can add up to 20 custom headers when you create or edit a webhook. You can use these custom headers for authentication to external services.
&gt; 
&gt; With this feature and the [custom webhook template](https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#custom-webhook-template) introduced in GitLab 16.10, you can now fully design custom webhooks. You can configure your webhooks to:
&gt; 
&gt; - Post custom payloads.
&gt; - Add any required authentication headers.
&gt; 
&gt; Like secret tokens and URL variables, custom headers are reset when the target URL changes.
&gt; 
&gt; Thanks to [Niklas](https://gitlab.com/Taucher2003) for [this community contribution](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/146702)!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Test project hooks with the REST API](https://docs.gitlab.com/ee/api/projects.html#trigger-a-test-project-hook): &lt;code&gt;Webhooks&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, you could test project hooks in the GitLab UI only. With this release, you can now trigger test hooks for specified projects by using the REST API.
&gt; 
&gt; Thanks to [Phawin](https://gitlab.com/lifez) for [this community contribution](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/147656)!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[GitLab for Slack app configurable for groups and instances](https://docs.gitlab.com/ee/user/project/integrations/gitlab_slack_application.html#from-the-project-or-group-settings): &lt;code&gt;Integrations&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, you could configure the GitLab for Slack app for one project at a time only. With this release, it's now possible to configure the integration for groups or instances and make changes to many projects at once.
&gt; 
&gt; This improvement brings the GitLab for Slack app closer to feature parity with the deprecated [Slack notifications integration](https://docs.gitlab.com/ee/user/project/integrations/slack.html).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Configurable import jobs limit](https://docs.gitlab.com/ee/administration/settings/import_and_export_settings.html#maximum-number-of-simultaneous-import-jobs) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Importers&lt;/code&gt;&lt;/summary&gt;

&gt; Until now, the maximum number of import jobs for:
&gt; 
&gt; - GitHub importer was 1000.
&gt; - Bitbucket Cloud and Bitbucket Server importers was 100.
&gt; 
&gt; These limits were hard-coded and couldn't be changed. These limits might have slowed down imports, because they might have been insufficient
&gt; to allow the import jobs to be processed at the same rate they were enqueued.
&gt; 
&gt; In this release, we've moved the hard-coded limits to application settings. Although we are not increasing these limits on GitLab.com, administrators
&gt; of self-managed GitLab instances can now configure the number of import jobs according to their needs.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/plan/"&gt;Plan&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Autocomplete support for links to wiki pages](https://docs.gitlab.com/ee/user/markdown.html#gitlab-specific-references): &lt;code&gt;Wiki&lt;/code&gt;&lt;/summary&gt;

&gt; We're thrilled to introduce autocomplete support for links to wiki pages in GitLab 16.11! With this new feature, linking to wiki pages from your epics and issues
&gt; has never been easier - it's just a matter of a few keystrokes.
&gt; 
&gt; Gone are the days of having to copy and paste wiki page URLs into epic and issue comments. Now, simply navigate to any group or project with wiki pages, access an epic or
&gt; issue, and use the autocomplete shortcut to seamlessly link to your wiki pages from the epic or issue!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Improved GitLab Pages visibility in sidebar](https://docs.gitlab.com/ee/user/project/pages/): &lt;code&gt;Pages&lt;/code&gt;&lt;/summary&gt;

&gt; In previous releases, for projects with a GitLab Pages site, it was difficult to find the site URL.
&gt; 
&gt; From GitLab 16.11, the right sidebar has a shortcut link to the site, so you can find the URL without needing to check the docs.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/create/"&gt;Create&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Group comment templates](https://docs.gitlab.com/ee/user/profile/comment_templates.html): &lt;code&gt;Code Review Workflow&lt;/code&gt;, &lt;code&gt;Team Planning&lt;/code&gt;&lt;/summary&gt;

&gt; Across an organization it can be helpful to have the same templated response in issues, epics, or merge requests. These responses might include standard questions that need to be answered, responses to common problems, or maybe structure for merge request review comments.
&gt; 
&gt; Group comment templates enable you to create saved responses that you can apply in comment boxes around GitLab to speed up your workflow. This new addition to comment templates allows organizations to create and manage templates centrally, so all of their users benefit from the same templates.
&gt; 
&gt; To create a comment template, go to any comment box on GitLab and select **Insert comment template &gt; Manage group comment templates**. After you create a comment template, it's available for all group members. Select the **Insert comment template** icon while making a comment, and your saved response will be applied.
&gt; 
&gt; We're really excited about this next iteration of comment templates and will also be adding [project-level comment templates](https://gitlab.com/gitlab-org/gitlab/-/issues/440818) soon too. If you have any feedback, please leave it in [issue 45120](https://gitlab.com/gitlab-org/gitlab/-/issues/451520).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Option to cancel a pipeline immediately if any jobs fails](https://docs.gitlab.com/ee/ci/yaml/#workflowauto_cancelon_job_failure): &lt;code&gt;Continuous Integration (CI)&lt;/code&gt;&lt;/summary&gt;

&gt; Sometimes after you notice a job fails, you might manually cancel the rest of the pipeline to save resources while you work on the issue causing the failure. With GitLab 16.11, you can now configure pipelines to be cancelled automatically when any job fails. With large pipelines that take a long time to run, especially with many long-running jobs that run in parallel, this can be an effective way to reduce resource usage and costs.
&gt; 
&gt; You can even configure a pipeline to immediately [cancel if a downstream pipeline fails](https://docs.gitlab.com/ee/ci/pipelines/downstream_pipelines.html#auto-cancel-the-parent-pipeline-from-a-downstream-pipeline), which cancels the parent pipeline and all other downstream pipelines.
&gt; 
&gt; Special thanks to [Marco](https://gitlab.com/zillemarco) for contributing to the feature!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Improve automatic retry for failed CI jobs with specific exit codes](https://docs.gitlab.com/ee/ci/yaml/#retry): &lt;code&gt;Pipeline Composition&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, you could use `retry:when` in addition to `retry:max` to configure how many times a job is retried
&gt; when specific failures occur, like when a script fails.
&gt; 
&gt; With this release, you can now use [`retry:exit_codes`](https://docs.gitlab.com/ee/ci/yaml/#retryexit_codes)
&gt; to configure automatic retries of failed jobs based on specific script exit codes.
&gt; You can use `retry:exit_codes` with `retry:when` and `retry:max` to fine-tune your pipeline's behavior
&gt; according to your specific needs and improve your pipeline execution.
&gt; 
&gt; Thanks to [Baptiste Lalanne](https://gitlab.com/BaptisteLalanne) for this community contribution!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[GitLab Runner 16.11](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We’re also releasing GitLab Runner 16.11 today! GitLab Runner is the lightweight, highly-scalable agent that runs your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; #### Bug Fixes:
&gt; 
&gt; - [Crash: fatal error: concurrent map read and map write](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/31077)
&gt; - [FF_KUBERNETES_HONOR_ENTRYPOINT feature not working](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37243)
&gt; 
&gt; The list of all changes is in the GitLab Runner [CHANGELOG](https://gitlab.com/gitlab-org/gitlab-runner/blob/16-11-stable/CHANGELOG.md).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Control who can download job artifacts](https://docs.gitlab.com/ee/ci/yaml/#artifactsaccess): &lt;code&gt;Pipeline Composition&lt;/code&gt;&lt;/summary&gt;

&gt; By default, all generated artifacts from CI/CD jobs in a public pipeline are available for download by all users with access to the pipeline. However, there are cases where artifacts should never be downloaded, or only be accessible for download by team members with a higher access level.
&gt; 
&gt; So in this release, we've added the `artifacts:access` keyword. Now, users can control whether artifacts can be downloaded by all users with access to the pipeline, only users with the Developer role or higher, or no user at all.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Improved pipeline details page](https://docs.gitlab.com/ee/ci/pipelines/#view-pipelines): &lt;code&gt;Pipeline Composition&lt;/code&gt;&lt;/summary&gt;

&gt; The pipeline graph offers a comprehensive overview of your pipelines, showing job statuses, runtime updates, multi-project pipelines, and parent-child pipelines.
&gt; 
&gt; Today, we're excited to announce the release of the redesigned pipeline graph with enhanced aesthetics, grouped jobs visualization, improved mobile expirence and expanded downstream pipeline visibility within your existing view.
&gt; 
&gt; We'd greatly appreciate it if you could try it out and share your feedback through this dedicated [issue](https://gitlab.com/gitlab-org/gitlab/-/issues/450676).

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v16.11.0" rel="alternate"/>
  </entry>
</feed>
