<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>Medusa Releases</title>
  <updated>2024-10-23T17:30:49.666293-04:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://github.com/medusajs/medusa/releases/tag/v2.0.0-rc.5</id>
    <title>New release for Medusa: Medusa Release Candidate #5</title>
    <updated>2024-10-15T13:14:19-04:00</updated>
    <author>
      <name>medusajs/medusa</name>
    </author>
    <content>&lt;!-- 
![image](https://github.com/user-attachments/assets/34a747a6-5ee9-4068-b3f8-38745aec646a)

# Medusa v2.0 Release Candidate #5

CMS_BREAK --&gt;

&lt;h2&gt;Get started with a new project&lt;/h2&gt;
&lt;p&gt;To get started using the RC, run the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
npx create-medusa-app@rc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This command will create a new Medusa project with our redesigned admin and a 2.0-compatible Next.js storefront. The Medusa application and the Next.js storefront are separate projects in separate folders.&lt;/p&gt;
&lt;h2&gt;Update existing project&lt;/h2&gt;
&lt;p&gt;Ensure your &lt;strong&gt;Medusa&lt;/strong&gt; dependencies in &lt;code&gt;package.json&lt;/code&gt; are using the &lt;code&gt;rc&lt;/code&gt; tag:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
  "dependencies": {
    "@medusajs/admin-sdk": "rc",
    "@medusajs/framework": "rc",
    "@medusajs/medusa": "rc",
    "@medusajs/medusa-cli": "rc",
    ...
  }
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To ensure an upgrade to a new version is completed correctly, run the following sequence of commands:&lt;/p&gt;
&lt;p&gt;```tsx
rm -rf node_modules
rm yarn.lock // or package-lock.json&lt;/p&gt;
&lt;p&gt;yarn // If you are using yarn berry, you need to create the lock-file first
```&lt;/p&gt;
&lt;h2&gt;Highlights&lt;/h2&gt;
&lt;h3&gt;Removing &lt;code&gt;ourDir&lt;/code&gt; from admin settings&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;[!WARNING]&lt;br /&gt;
Breaking change&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;outDir&lt;/code&gt; has been removed in favor of internally computing output directory for the admin dashboard.  &lt;/p&gt;
&lt;p&gt;The computation follows these rules
- If admin is not &lt;code&gt;disabled&lt;/code&gt; and the &lt;code&gt;build&lt;/code&gt; command is run without the &lt;code&gt;--admin-only&lt;/code&gt; flag, the admin output directory will be &lt;code&gt;.medusa/server/public/admin&lt;/code&gt; and it will be served from that same location from the Medusa instance.
- If admin is not &lt;code&gt;disabled&lt;/code&gt; and the &lt;code&gt;build&lt;/code&gt; command is run with the &lt;code&gt;--admin-only&lt;/code&gt; flag, then the admin output directory will be &lt;code&gt;.medusa/admin&lt;/code&gt;. This commands should be used for deploying the admin dashboard separately from the Medusa instance.&lt;/p&gt;
&lt;p&gt;```diff
// medusa-config.ts&lt;/p&gt;
&lt;p&gt;{
  // ...
  admin: {
-    outDir: 'some/path'
  }
}
```&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;chore: add compare_at_unit_price when price list price is retrieved by @riqwan in https://github.com/medusajs/medusa/pull/9564&lt;/li&gt;
&lt;li&gt;feat(providers): locking redis by @carlos-r-l-rodrigues in https://github.com/medusajs/medusa/pull/9544&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bugs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;fix(create-medusa-app): use db:migrate to run migrations by @shahednasser in https://github.com/medusajs/medusa/pull/9565&lt;/li&gt;
&lt;li&gt;fix(core-flows, link-module): product &amp;lt;&amp;gt; inventory delete cascades by @fPolic in https://github.com/medusajs/medusa/pull/9528&lt;/li&gt;
&lt;li&gt;fix: remove default value for the cluster flag by @thetutlage in https://github.com/medusajs/medusa/pull/9570&lt;/li&gt;
&lt;li&gt;fix(dashboard): reservation inventory details by @fPolic in https://github.com/medusajs/medusa/pull/9535&lt;/li&gt;
&lt;li&gt;feat(core-flows, product): options checks on product create/update by @fPolic in https://github.com/medusajs/medusa/pull/9171&lt;/li&gt;
&lt;li&gt;fix(utils): update medusa config resolution for consistency by @adrien2p in https://github.com/medusajs/medusa/pull/9591&lt;/li&gt;
&lt;li&gt;fix(utils): Reversed module package missing references by @adrien2p in https://github.com/medusajs/medusa/pull/9589&lt;/li&gt;
&lt;li&gt;fix(admin-vite-plugin): Normalize file paths and add tests by @kasperkristensen in https://github.com/medusajs/medusa/pull/9595&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Chores&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;chore: update slack message by @riqwan in https://github.com/medusajs/medusa/pull/9290&lt;/li&gt;
&lt;li&gt;chore: Remove Query Filter by @adrien2p in https://github.com/medusajs/medusa/pull/9403&lt;/li&gt;
&lt;li&gt;chore: Update admin build/serve configuration by @adrien2p in https://github.com/medusajs/medusa/pull/9584&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: https://github.com/medusajs/medusa/compare/v2.0.0-rc.4...v2.0.0-rc.5&lt;/p&gt;</content>
    <link href="https://github.com/medusajs/medusa/releases/tag/v2.0.0-rc.5" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/medusajs/medusa/releases/tag/v2.0.0-rc.6</id>
    <title>New release for Medusa: Medusa Release Candidate #6</title>
    <updated>2024-10-16T05:53:48-04:00</updated>
    <author>
      <name>medusajs/medusa</name>
    </author>
    <content>&lt;!-- 
![image](https://github.com/user-attachments/assets/2cc71619-1e6f-44bf-becb-350d6a767bae)

# Medusa v2.0 Release Candidate #6

CMS_BREAK --&gt;

&lt;h2&gt;Get started with a new project&lt;/h2&gt;
&lt;p&gt;To get started using the RC, run the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
npx create-medusa-app@rc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This command will create a new Medusa project with our redesigned admin and a 2.0-compatible Next.js storefront. The Medusa application and the Next.js storefront are separate projects in separate folders.&lt;/p&gt;
&lt;h2&gt;Update existing project&lt;/h2&gt;
&lt;p&gt;Ensure your &lt;strong&gt;Medusa&lt;/strong&gt; dependencies in &lt;code&gt;package.json&lt;/code&gt; are using the &lt;code&gt;rc&lt;/code&gt; tag:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
  "dependencies": {
    "@medusajs/admin-sdk": "rc",
    "@medusajs/framework": "rc",
    "@medusajs/medusa": "rc",
    "@medusajs/medusa-cli": "rc",
    ...
  }
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To ensure an upgrade to a new version is completed correctly, run the following sequence of commands:&lt;/p&gt;
&lt;p&gt;```tsx
rm -rf node_modules
rm yarn.lock // or package-lock.json&lt;/p&gt;
&lt;p&gt;yarn // If you are using yarn berry, you need to create the lock-file first
```&lt;/p&gt;
&lt;h2&gt;Highlight&lt;/h2&gt;
&lt;h3&gt;Resolved issue with module provider loading&lt;/h3&gt;
&lt;p&gt;See https://github.com/medusajs/medusa/pull/9601 for more.&lt;/p&gt;
&lt;h3&gt;Bugs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fix(admin-vite-plugin): Replace slashes for Windows by @kasperkristensen in https://github.com/medusajs/medusa/pull/9602&lt;/li&gt;
&lt;li&gt;fix: resolve provider path before requiring it by @thetutlage in https://github.com/medusajs/medusa/pull/9601&lt;/li&gt;
&lt;li&gt;fix(types): logger by @carlos-r-l-rodrigues in https://github.com/medusajs/medusa/pull/9581&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docs: fix package names in module registration by @shahednasser in https://github.com/medusajs/medusa/pull/9590&lt;/li&gt;
&lt;li&gt;docs: update resolve path to use src by @shahednasser in https://github.com/medusajs/medusa/pull/9605&lt;/li&gt;
&lt;li&gt;docs-util: fixes for OAS docs generator + framework typedoc config by @shahednasser in &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: https://github.com/medusajs/medusa/compare/v2.0.0-rc.5...v2.0.0-rc.6&lt;/p&gt;</content>
    <link href="https://github.com/medusajs/medusa/releases/tag/v2.0.0-rc.6" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/medusajs/medusa/releases/tag/v2.0.0-rc.7</id>
    <title>New release for Medusa: Medusa 2.0 Release Candidate #7</title>
    <updated>2024-10-18T10:25:36-04:00</updated>
    <author>
      <name>medusajs/medusa</name>
    </author>
    <content>&lt;!-- 
![image](https://github.com/user-attachments/assets/6d169c48-6b40-48b9-a734-c70a20581f25)

# Medusa v2.0 Release Candidate #7

CMS_BREAK --&gt;

&lt;h2&gt;Get started with a new project&lt;/h2&gt;
&lt;p&gt;To get started using the RC, run the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
npx create-medusa-app@rc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This command will create a new Medusa project with our redesigned admin and a 2.0-compatible Next.js storefront. The Medusa application and the Next.js storefront are separate projects in separate folders.&lt;/p&gt;
&lt;h2&gt;Update existing project&lt;/h2&gt;
&lt;p&gt;Ensure your &lt;strong&gt;Medusa&lt;/strong&gt; dependencies in &lt;code&gt;package.json&lt;/code&gt; are using the &lt;code&gt;rc&lt;/code&gt; tag:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
  "dependencies": {
    "@medusajs/admin-sdk": "rc",
    "@medusajs/framework": "rc",
    "@medusajs/medusa": "rc",
    "@medusajs/medusa-cli": "rc",
    ...
  }
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To ensure an upgrade to a new version is completed correctly, run the following sequence of commands:&lt;/p&gt;
&lt;p&gt;```tsx
rm -rf node_modules
rm yarn.lock // or package-lock.json&lt;/p&gt;
&lt;p&gt;yarn // If you are using yarn berry, you need to create the lock-file first
```&lt;/p&gt;
&lt;h2&gt;Highlights&lt;/h2&gt;
&lt;h3&gt;Package restructuring&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;[!WARNING]&lt;br /&gt;
Breaking change&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This release comes with the final package restructuring, mainly dealing with consistent package names. &lt;/p&gt;
&lt;p&gt;The following packages have been renamed:
- &lt;code&gt;@medusajs/medusa-cli&lt;/code&gt; -&amp;gt; &lt;code&gt;@medusajs/cli&lt;/code&gt;
- &lt;code&gt;@medusajs/stock-location-next&lt;/code&gt; -&amp;gt; &lt;code&gt;@medusajs/stock-location&lt;/code&gt;
- &lt;code&gt;@medusajs/inventory-next&lt;/code&gt; -&amp;gt; &lt;code&gt;@medusajs/inventory&lt;/code&gt;
- &lt;code&gt;@medusajs/file-local-next&lt;/code&gt; -&amp;gt; &lt;code&gt;@medusajs/file-local&lt;/code&gt;
- &lt;code&gt;medusa-telemetry&lt;/code&gt; -&amp;gt; &lt;code&gt;@medusajs/telemetry&lt;/code&gt;
- &lt;code&gt;medusa-test-utils&lt;/code&gt; -&amp;gt; &lt;code&gt;@medusajs/test-utils&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is a breaking change, and to upgrade, please update your dependencies as follows:
- Replace &lt;code&gt;medusa-test-utils&lt;/code&gt; with &lt;code&gt;@medusajs/test-utils&lt;/code&gt; in your project
- Replace &lt;code&gt;@medusajs/medusa-cli&lt;/code&gt; with &lt;code&gt;@medusajs/cli&lt;/code&gt; in your project&lt;/p&gt;
&lt;h3&gt;Standardize provider ID generation&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;[!WARNING]&lt;br /&gt;
Breaking change&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We have cleaned up some inconsistencies and legacy code in the provider domain, which has led to breaking changes. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Module providers &lt;strong&gt;should no longer have&lt;/strong&gt; a static property &lt;code&gt;PROVIDER&lt;/code&gt; – this has been replaced with &lt;code&gt;identifier&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Module providers &lt;strong&gt;should have&lt;/strong&gt; a static property &lt;code&gt;identifier&lt;/code&gt; describing the name of the provider&lt;/li&gt;
&lt;li&gt;Module providers' container registration name have changed format&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;
&lt;code&gt;ts
const key = `pp_[PROVIDER]_[id]`&lt;/code&gt;
- &lt;code&gt;id&lt;/code&gt; being the id specified in the module provider configuration in &lt;code&gt;medusa-config.js&lt;/code&gt;
- &lt;code&gt;PROVIDER&lt;/code&gt; being the property described above, that has now been removed&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;
&lt;code&gt;ts
const key = `pp_[identifier]_[id]`&lt;/code&gt;
- &lt;code&gt;id&lt;/code&gt; being the id specified in the module provider configuration in &lt;code&gt;medusa-config.js&lt;/code&gt;
    - If this is not specified, we omit it from the registration key*
- &lt;code&gt;identifier&lt;/code&gt; being the property described above, that replaced &lt;code&gt;PROVIDER&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;*Previously, we did not omit the &lt;code&gt;id&lt;/code&gt; if it wasn't specified, which meant registration keys contained &lt;code&gt;undefined&lt;/code&gt;. For example:
&lt;code&gt;pp_stripe-ideal_undefined&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Aside from having a new name in the dependency container, these changes will also affect the payment providers stored in the database. They are stored using the registration key described above, so consequently, they will be loaded anew the first time you boot up your application after upgrading to this version.&lt;/p&gt;
&lt;p&gt;Let's consider an example provider configuration of Stripe with an explicit &lt;code&gt;id&lt;/code&gt;:
&lt;code&gt;ts
{
  id: "stripe-usd",
  resolve: "@medusajs/payment-stripe",
  options: { ... }
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If Stripe providers were enabled, they used to be stored with the following IDs in the database:
&lt;code&gt;pp_stripe_stripe-usd
pp_stripe-ideal_stripe-usd
pp_stripe-bancontact_stripe-usd
...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Those IDs will now be:
&lt;code&gt;pp_stripe_stripe-usd
pp_stripe-ideal_stripe-usd
pp_stripe-bancontact_stripe-usd
...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let's consider an example provider configuration of Stripe without an explicit &lt;code&gt;id&lt;/code&gt;:
&lt;code&gt;ts
{
  resolve: "@medusajs/payment-stripe",
  options: { ... }
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If Stripe providers were enabled, they used to be stored with the following IDs in the database:
&lt;code&gt;pp_stripe_undefined
pp_stripe-ideal_undefined
pp_stripe-bancontact_undefined
...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Those IDs will now be:
&lt;code&gt;pp_stripe
pp_stripe-ideal
pp_stripe-bancontact
...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These changes will affect all created payment sessions on carts, as the provider specified upon creation no longer exists.&lt;/p&gt;
&lt;h3&gt;Form submission in Admin&lt;/h3&gt;
&lt;p&gt;Form submissions in Admin now require &lt;code&gt;CMD + Enter&lt;/code&gt; on MacOS or &lt;code&gt;CTRL + Enter&lt;/code&gt; on Windows. This makes for a more intentional action and prevents incorrect submissions.&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;breaking: rename package names to be consistent and under @medusajs scope by @thetutlage in https://github.com/medusajs/medusa/pull/9580&lt;/li&gt;
&lt;li&gt;feat(core-flows): cart events by @carlos-r-l-rodrigues in https://github.com/medusajs/medusa/pull/9585&lt;/li&gt;
&lt;li&gt;feat(dashboard): Submit forms on Cmd + Enter by @kasperkristensen in https://github.com/medusajs/medusa/pull/9623&lt;/li&gt;
&lt;li&gt;feat(core-flows,types,medusa): Add tax region update API by @riqwan in https://github.com/medusajs/medusa/pull/9634&lt;/li&gt;
&lt;li&gt;fea(providers): locking postgres by @carlos-r-l-rodrigues in https://github.com/medusajs/medusa/pull/9545&lt;/li&gt;
&lt;li&gt;feat(medusa): ordem items endpoint by @carlos-r-l-rodrigues in https://github.com/medusajs/medusa/pull/9646&lt;/li&gt;
&lt;li&gt;feat: allow html content for notifications by @christiananese in https://github.com/medusajs/medusa/pull/9613&lt;/li&gt;
&lt;li&gt;feature: use application logger to log HTTP requests by @thetutlage in https://github.com/medusajs/medusa/pull/9655&lt;/li&gt;
&lt;li&gt;feat(dashboard) taxes + discount breakdown by @fPolic in https://github.com/medusajs/medusa/pull/9586&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bugs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;fix(dashboard): Set correct method value on promotion by @riqwan in https://github.com/medusajs/medusa/pull/9610&lt;/li&gt;
&lt;li&gt;fix(dashboard): FF return reason table by @fPolic in https://github.com/medusajs/medusa/pull/9614&lt;/li&gt;
&lt;li&gt;fix(utils): Mikro orm joined selection issue when select-in strategy by @adrien2p in https://github.com/medusajs/medusa/pull/9615&lt;/li&gt;
&lt;li&gt;fix(modules-sdk): Add missing paths to require.resolve in load resources by @adrien2p in https://github.com/medusajs/medusa/pull/9608&lt;/li&gt;
&lt;li&gt;fix(product): options validation if ids are same by @fPolic in https://github.com/medusajs/medusa/pull/9622&lt;/li&gt;
&lt;li&gt;fix(dashboard,ui): Fix outline flash on FocusModal by @kasperkristensen in https://github.com/medusajs/medusa/pull/9624&lt;/li&gt;
&lt;li&gt;fix: Add free text search on reservations by @olivermrbl in https://github.com/medusajs/medusa/pull/9621&lt;/li&gt;
&lt;li&gt;fix(dashboard): cleanup Payments section by @fPolic in https://github.com/medusajs/medusa/pull/9520&lt;/li&gt;
&lt;li&gt;fix(dashboard): Fix styling of nested NavLinks by @kasperkristensen in https://github.com/medusajs/medusa/pull/9637&lt;/li&gt;
&lt;li&gt;fix(dashboard): Ensure all progress tabs are 200px wide by @kasperkristensen in https://github.com/medusajs/medusa/pull/9644&lt;/li&gt;
&lt;li&gt;fix(ui): Fix Avatar styling by @kasperkristensen in https://github.com/medusajs/medusa/pull/9645&lt;/li&gt;
&lt;li&gt;fix(core-flows, types): general fixes to types and tsdocs by @shahednasser in https://github.com/medusajs/medusa/pull/9633&lt;/li&gt;
&lt;li&gt;fix(types): change options to be required in http type by @shahednasser in https://github.com/medusajs/medusa/pull/9642&lt;/li&gt;
&lt;li&gt;fix(dashboard): Hide usage insights by @kasperkristensen in https://github.com/medusajs/medusa/pull/9651&lt;/li&gt;
&lt;li&gt;test(admin-vite-plugin): React Invalid hook call on Windows by @kasperkristensen in https://github.com/medusajs/medusa/pull/9647&lt;/li&gt;
&lt;li&gt;Fix/production logging by @thetutlage in https://github.com/medusajs/medusa/pull/9658&lt;/li&gt;
&lt;li&gt;fix(orchestration): local workflow proxy by @carlos-r-l-rodrigues in https://github.com/medusajs/medusa/pull/9664&lt;/li&gt;
&lt;li&gt;fix: resolve paths using require.resolve by @thetutlage in https://github.com/medusajs/medusa/pull/9665&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;docs: added examples page by @shahednasser in https://github.com/medusajs/medusa/pull/9587&lt;/li&gt;
&lt;li&gt;docs: improved commerce modules [5/5] by @shahednasser in https://github.com/medusajs/medusa/pull/9592&lt;/li&gt;
&lt;li&gt;docs: fix heroku typo by @shahednasser in https://github.com/medusajs/medusa/pull/9382&lt;/li&gt;
&lt;li&gt;docs: update providers to use ModuleProvider by @shahednasser in https://github.com/medusajs/medusa/pull/9579&lt;/li&gt;
&lt;li&gt;Switch the headings to match the content by @erickirt in https://github.com/medusajs/medusa/pull/9619&lt;/li&gt;
&lt;li&gt;fix(docs): update workflow API example to include query parameter by @VrajPatelK in https://github.com/medusajs/medusa/pull/9640&lt;/li&gt;
&lt;li&gt;docs: update curl request to /admin/products by @shahednasser in https://github.com/medusajs/medusa/pull/9641&lt;/li&gt;
&lt;li&gt;docs-util: add configuration to generate js-sdk reference by @shahednasser in https://github.com/medusajs/medusa/pull/9630&lt;/li&gt;
&lt;li&gt;docs: add routing page by @shahednasser in https://github.com/medusajs/medusa/pull/9550&lt;/li&gt;
&lt;li&gt;docs: document JS SDK installation by @shahednasser in https://github.com/medusajs/medusa/pull/9611&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Chores&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;chore(medusa): default endpoints size limit by @carlos-r-l-rodrigues in https://github.com/medusajs/medusa/pull/9616&lt;/li&gt;
&lt;li&gt;chore: Prepare changeset for 2.0 release by @olivermrbl in https://github.com/medusajs/medusa/pull/9631&lt;/li&gt;
&lt;li&gt;feat(medusa): Display admin url on start by @adrien2p in https://github.com/medusajs/medusa/pull/9643&lt;/li&gt;
&lt;li&gt;chore(js-sdk): add ignore tsdoc tag to client and constructor of inner classes by @shahednasser in https://github.com/medusajs/medusa/pull/9635&lt;/li&gt;
&lt;li&gt;chore: remove internal module resources option by @carlos-r-l-rodrigues in https://github.com/medusajs/medusa/pull/9582&lt;/li&gt;
&lt;li&gt;chore: Update modules providers configuration with 'identifier' and 'PROVIDER' by @adrien2p in https://github.com/medusajs/medusa/pull/9636&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;@VrajPatelK made their first contribution in https://github.com/medusajs/medusa/pull/9640&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: https://github.com/medusajs/medusa/compare/v2.0.0-rc.6...v2.0.0-rc.7&lt;/p&gt;</content>
    <link href="https://github.com/medusajs/medusa/releases/tag/v2.0.0-rc.7" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/medusajs/medusa/releases/tag/v2.0.0</id>
    <title>New release for Medusa: v2.0.0</title>
    <updated>2024-10-23T03:04:43-04:00</updated>
    <author>
      <name>medusajs/medusa</name>
    </author>
    <content>&lt;!-- 
![image](https://github.com/user-attachments/assets/e3894ced-8c3f-4f69-b799-ec97eb262843)

# Medusa v2.0 Release

CMS_BREAK --&gt;

&lt;h1&gt;Medusa v.2.0.0&lt;/h1&gt;
&lt;p&gt;We’re excited to announce the release of Medusa 2.0 to the world today. This major version has been over 16 months in the making, with more than 3500 pull requests merged, and represents an incredible engineering feat by our team. &lt;/p&gt;
&lt;p&gt;Medusa 2.0 is a complete rewrite of our architecture and feature set with breaking changes to many areas of Medusa 1.0. While we recognize this may be disruptive for our users, we deemed these changes necessary to establish the proper foundation for our vision of the future of building applications with Medusa.&lt;/p&gt;
&lt;p&gt;Since this is a complete rewrite and we have yet to finalize an upgrade guide, there is no point in covering all the breaking changes in this announcement. You can expect this to be covered in the upgrade guide, which is published within the next two months. This post focuses on what’s new in Medusa 2.0. We will briefly cover the new architecture and commerce features, but otherwise, leave it to the documentation to educate about all the new concepts. Our documentation has also been rewritten and will, aside from tutorials, guides, and references, offer an in-depth learning path, equipping you with the knowledge needed to build bespoke commerce applications with Medusa.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Package restructuring&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;First, let’s understand the packages you need to build applications with Medusa 2.0. These haven’t changed much from 1.0, aside from some restructuring for a more logical separation of concerns.&lt;/p&gt;
&lt;p&gt;There are three core packages in Medusa 2.0, and these are installed in new projects by default:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@medusajs/medusa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@medusajs/framework&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@medusajs/admin-sdk&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;@medusajs/medusa&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you have been testing previews of Medusa 2.0, you know that we’ve gone through a few iterations of package management to figure out the most appropriate bundling of our commerce features. Eventually, we decided to stick with what we had in Medusa 1.0, a single package containing all commerce modules and the Rest API. Much of this code ships as separate npm packages (more about this in the section covering our modular architecture). However, they are all dependencies of &lt;code&gt;@medusajs/medusa&lt;/code&gt;, which makes for a seamless upgrade path whenever new versions of underlying packages are published.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@medusajs/framework&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We are excited to introduce a new package dedicated to our framework for customization. This package holds all the tooling needed to extend existing and/or introduce new functionality in Medusa projects. This includes API Routes, Workflows SDK, Modules SDK, Subscribers, Scheduled Jobs, Loaders, DML, and more. We will cover this in more depth in a later section. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;@medusajs/admin-sdk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We have restructured our admin packages as part of the dashboard redesign. The commerce dashboard ships as &lt;code&gt;@medusajs/dashboard&lt;/code&gt; and is a dependency of the core package &lt;code&gt;@medusajs/medusa&lt;/code&gt;. The tooling to extend the dashboard, including UI Widgets and Routes, is now bundled in an Admin SDK package, &lt;code&gt;@medusajs/admin-sdk&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Now that you understand the new packages, let’s move on to the most significant change in Medusa 2.0. &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Architecture rewrite&lt;/h2&gt;
&lt;p&gt;The largest change from Medusa 1.0 to 2.0 is the rewrite of our core architecture. While architecture rewrites often have a tarnished reputation, we believe this decision aligns with how software engineering will evolve in the next decade. We will elaborate on this thinking in a separate blog post. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complete isolation of domains&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Medusa 2.0, all business domains (services and data models) have been rewritten from scratch to eliminate interdependencies between them. To understand the reasoning behind this change, let’s briefly consider the previous architectural design. &lt;/p&gt;
&lt;p&gt;In Medusa 1.0, services, e.g., Product and Cart, held most cross-domain business logic, and relationships between data models were defined via foreign keys in the database. The Cart service strictly depended on the Product service for many operations, e.g., adding a line item to the cart, and the line item data model references product variants via foreign keys. This pattern was applied to all domains in Medusa 1.0, and made it near-impossible to partially adopt our feature offering—it was all or nothing—a dealbreaker for some of our users, especially in the enterprise segment. &lt;/p&gt;
&lt;p&gt;These interdependencies between domains significantly constrained the level of extensibility we could offer in the service layer. The only way to “extend” services was to override entire methods, which led to nasty upgrade paths whenever we upgraded those service methods with additional logic.&lt;/p&gt;
&lt;p&gt;Medusa 2.0 eliminates all interdependencies between domains. Services are now pure in the sense that they only manage resources within their domain. All cross-domain functionality has been moved to extensible workflows, which will be covered in a later section. We’ve also eliminated all database-level dependencies, removing foreign keys between data models in different modules.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Architecture of Medusa 2.0&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Medusa Architecture" src="https://github.com/user-attachments/assets/a0469c41-61e0-4cc3-b7e1-4e636c269b74" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Benefits of module isolation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We’ve already touched on some key benefits of module isolation. Over the past three years, we’ve seen a growing demand for incremental adoption, especially from large businesses. These businesses often have a sizeable existing tech stack with various integrations and custom applications. For them, a full migration can take years and cost millions. They need a platform that allows them to migrate their tech stack gradually while keeping the existing systems intact. Our new modular architecture makes that possible (and feasible).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Gradual adoption of modules&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Medusa Architecture Gradual Adoption" src="https://github.com/user-attachments/assets/b7a34aad-4595-4bd9-9ea4-cc38e4aa8972" /&gt;&lt;/p&gt;
&lt;p&gt;A related benefit of module isolation is our new standalone mode. Not all companies need the full suite of features of a commerce platform. We’ve seen many requests for (and now usage of) standalone modules, which is a new “runtime” of modules in Medusa 2.0. Companies can install and use a few modules to build out their application. This is typically the preceding step to the gradual migration described above, where companies, over time, adopt more and more modules until they eventually leverage the full power of our platform. &lt;/p&gt;
&lt;p&gt;For example, the Cart module can be used standalone to build a custom checkout flow:&lt;/p&gt;
&lt;p&gt;```tsx
import CartService from "@medusajs/cart"&lt;/p&gt;
&lt;p&gt;const cart = await cartService.createCarts({
  email: "tony@stark.com",
  currency_code: "usd"
})&lt;/p&gt;
&lt;p&gt;await cartService.addLineItem(cart.id. {
  title: "Custom item",
  unit_price: 1000,
  quantity: 1
})
```&lt;/p&gt;
&lt;p&gt;In a common setup, line items in a cart are associated with products. However, that might not be the case for your use case. You may sell simpler goods that are not tied to a product variant or calculated price. All you need is plug-and-play cart management, and we offer you precisely that. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Services as a lower-level primitive&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A non-obvious benefit from our architecture rewrite is that services have become a more useful lower-level primitive. As described above, we've removed all cross-domain business logic from services, limiting them to managing resources within their modules. So, when you use the Cart service to create a cart, you only create a cart. This sounds obvious, but in monolithic architectures, it’s common to carry out cross-domain operations within single service methods. For example, you might create shipping methods or populate the region as part of creating the cart. Such actions are typically achieved via dependency injection, which, in Medusa 2.0, is not available across modules.&lt;/p&gt;
&lt;p&gt;Having more “dumb” services enables a greater level of composability. Modules can integrate more seamlessly, and how you integrate them is entirely up to you and your use case. Consider our previous example. Imagine you're not selling traditional products but rather subscriptions or licenses. Our Cart service doesn’t care. As long as you provide the required details to create line items, the Cart service and all its related functions, including total computation, will work as expected. It will also continue to work seamlessly with other modules, e.g. you can apply promotions to your license products with little to no changes needed. This is an example of the power of services as lower-level primitives and elegant abstractions.&lt;/p&gt;
&lt;p&gt;Read more about &lt;a href="https://docs.medusajs.com/v2/learn"&gt;the architectural changes in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;New and improved commerce features&lt;/h2&gt;
&lt;p&gt;As part of rewriting our commerce modules, we reevaluated each feature set to identify improvements. This led to various updates and new modules we are excited to introduce today.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Promotions engine&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our new Promotion module, &lt;code&gt;@medusajs/promotion&lt;/code&gt;, lets you set up advanced conditional promotion logic. You can compute discounts based on coupons, cart items, customers, or custom data models. Additionally, we’ve introduced new types of promotions, such as Buy X and Get Y promotions. &lt;/p&gt;
&lt;p&gt;Read more about the Promotions module &lt;a href="https://medusajs.com/promotion-module/"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advanced inventory management&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our new Inventory and Stock Location modules, &lt;code&gt;@medusajs/inventory&lt;/code&gt; and &lt;code&gt;@medusajs/stock-location&lt;/code&gt;, significantly improve inventory management in Medusa. With our Stock Location module, you can keep inventory in multiple warehouses worldwide, including physical stores, and associate those locations with shipping zones to ensure your fulfillment processes are optimized for distance to customers. With our new Inventory module, your product variants can share inventory items, enabling new use cases such as product bundles.&lt;/p&gt;
&lt;p&gt;Read more about the Inventory and Stock Location modules &lt;a href="https://medusajs.com/inventory-module/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flexible authentication&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our new authentication module, &lt;code&gt;@medusajs/auth&lt;/code&gt;, is significantly more flexible than what we had in Medusa 1.0. It allows you to seamlessly introduce new authentication providers, such as Auth0, and ships with officially supported implementations for email-password, Google, and GitHub.&lt;/p&gt;
&lt;p&gt;Here’s how the Google provider is configured:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tsx
export default defineConfig({
  modules: [
    {
      resolve: "@medusajs/medusa/auth",
      options: {
        providers: [
          {
            resolve: "@medusajs/auth-google",
            options: {
          clientID: process.env.GOOGLE_CLIENT_ID,
          clientSecret: process.env.GOOGLE_CLIENT_SECRET,
              callbackURL: process.env.GOOGLE_CALLBACK_URL,
             }
           }        
         ]
       } 
     }
   ]
})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Furthermore, this new authentication primitive allows you to add new authenticated identity groups, reusing all the core authentication logic.&lt;/p&gt;
&lt;p&gt;For example, imagine we want to introduce employees and let them sign up from the storefront. We create a new authenticated endpoint in the Store API for creating employees. Then, we plug in the &lt;code&gt;authenticate&lt;/code&gt; middleware to accept employees as valid actors. &lt;/p&gt;
&lt;p&gt;```tsx
// src/api/middlewares.ts&lt;/p&gt;
&lt;p&gt;export default defineMiddlewares({
  routes: [
    {
      method: ["POST"],
      matcher: "/store/employees",
      middlewares: [
        authenticate(["employee"], "bearer", {
          allowUnregistered: true,
        }),
      ],
    },
  ]
})
```&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This example assumes you’ve created a new data model &lt;code&gt;Employee&lt;/code&gt;. You’ll learn more about this in the DML section of the release notes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And just like that (and a few other steps), your employees are authenticated similarly to your customers. The full tutorial for this setup can be found &lt;a href="https://docs.medusajs.com/v2/resources/examples#create-an-actor-type-to-authenticate"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition to these three highlights, we have introduced many new improvements across our modules. Read more about these in &lt;a href="https://docs.medusajs.com/v2/resources/commerce-modules"&gt;our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Custom Modules&lt;/h2&gt;
&lt;p&gt;As described previously, Medusa 2.0 has a more flexible architecture by eliminating interdependencies between modules. Aside from the benefits outlined earlier, this flexibility also makes custom modules simpler to create. The development process is based on a range of new tools in our framework, which we’ll briefly describe in the following sections.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data Modeling Language (DML)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are excited to introduce a new tool, DML, for defining data models. The tool reduces decision fatigue by eliminating considerations around the ORM, defining relationships, column types, and more. &lt;/p&gt;
&lt;p&gt;The DML is used as follows:&lt;/p&gt;
&lt;p&gt;```tsx
import { model } from "@medusajs/framework"&lt;/p&gt;
&lt;p&gt;const Brand = model.define("brand", {
  id: model.id({ prefix: "br_" }),
  name: model.text(),
  description: model.text().nullable(),
})
```&lt;/p&gt;
&lt;p&gt;Read more about the &lt;a href="https://docs.medusajs.com/v2/learn/advanced-development/data-models"&gt;DML in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Medusa Service factories&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Querying and mutating data models previously required a full service implementation, which was a lot of grunt work just to get started. In Medusa 2.0, we’ve introduced &lt;code&gt;MedusaService&lt;/code&gt; that gives you all the standard methods for managing your data models out of the box. This includes create, retrieve, update, delete, list, upsert, and a few more.&lt;/p&gt;
&lt;p&gt;Read more about the &lt;a href="https://docs.medusajs.com/v2/learn/advanced-development/modules/service-factory"&gt;service factories in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your module service should extend the &lt;code&gt;MedusaService&lt;/code&gt; and specify the data models for which methods should be created:&lt;/p&gt;
&lt;p&gt;```tsx
import { MedusaService } from "@medusajs/framework/utils"&lt;/p&gt;
&lt;p&gt;export default BrandService extends MedusaService({ Brand }) {}
```&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;MedusaService&lt;/code&gt; then generates partially type-safe methods on the class:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tsx
const brandModule = container.resolve("brand")
const brand = await brandModule.createBrands({ name: "Medusa Running" })&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Read more about &lt;a href="https://docs.medusajs.com/v2/learn/advanced-development/modules"&gt;modules in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Module Linking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Eliminating database-level dependencies between modules doesn’t come without tradeoffs. Cross-domain references no longer leverage traditional database foreign keys, so we’ve introduced our own mechanism, Module Linking, for creating relationships between two models (from two different modules).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;defineLink&lt;/code&gt; utility lets you link two data models and has semantics similar to those of relationship APIs in ORMs:&lt;/p&gt;
&lt;p&gt;```tsx
import { defineLink } from "@medusajs/framework/utils"&lt;/p&gt;
&lt;p&gt;// "one-to-one"
export default defineLink(
  ProductModule.linkable.product,
  BrandModule.linkable.brand
)&lt;/p&gt;
&lt;p&gt;// "many-to-one"
export default defineLink(
  {
    linkable: ProductModule.linkable.product,
    isList: true
  }
  BrandModule.linkable.brand
)
```&lt;/p&gt;
&lt;p&gt;Read more about &lt;a href="https://docs.medusajs.com/v2/learn/advanced-development/module-links"&gt;Module Linking in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Custom modules in Medusa 2.0 play a critical role in introducing new functionality in your application. Therefore, we recommend reading through the learning path to grasp the new concepts and tools fully.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Workflows&lt;/h2&gt;
&lt;p&gt;In Medusa 2.0, cross-domain business logic has been largely rewritten to adapt to our new modular architecture. Since domains no longer interact directly with each other at the service level, we have created a higher-level primitive to piece together module operations. &lt;/p&gt;
&lt;p&gt;We are excited to introduce Workflows in Medusa 2.0.&lt;/p&gt;
&lt;p&gt;```tsx
const workflowName = "accept-quote"&lt;/p&gt;
&lt;p&gt;const acceptQuoteWorkflow = createWorkflow(workflowName, function (input) {
  const cart = retrieveCart(input.cartQuoteId);
  reserveInventory(cart);
  authorizePayment(cart);
  createOrder(cart);
});
```&lt;/p&gt;
&lt;p&gt;All business logic in Medusa 2.0 is built with Workflows, e.g., add to cart, complete cart, create fulfillment, etc. Workflows are composed of steps. Steps are reusable pieces of logic, typically isolated to a single module, and can be seen as atomic operations. If any steps fail, the entire workflow is rolled back. A rollback triggers compensating actions for each step that reverts the corresponding successful action previously run.&lt;/p&gt;
&lt;p&gt;```tsx
const stepName = "reserve-inventory"&lt;/p&gt;
&lt;p&gt;const reserveInventory = createStep(stepName, async (cart, context) =&amp;gt; {
    const inventoryService = context.container.resolve("inventoryService");
    await inventoryService.reserveInventory(cart.items);
    return new StepResponse({ success: true }, cart.items);
  },
  async (items, context) =&amp;gt; {
    const inventoryService = context.container.resolve("inventoryService");
    await inventoryService.releaseInventory(items);
  }
);
```&lt;/p&gt;
&lt;p&gt;Workflows are extensible by nature. Steps can be added, removed, and replaced, which opens up full customization of all pre-built opinionated business logic in Medusa. Extensions are injected via Workflow Hooks. Initially, only a few select workflows can be extended; however, we expect to introduce Hooks across all workflows in follow-up releases.&lt;/p&gt;
&lt;p&gt;Read more about &lt;a href="https://docs.medusajs.com/v2/learn/advanced-development/workflows"&gt;Workflows and Workflow Hooks in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Long-running Workflows&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Workflows have durable executions, which enable a range of new use cases, including long-running operations. A long-running Workflow is an asynchronous series of steps that can span hours, days, or weeks and support humans in the loop. For example, you can build a Workflow to manage the preparation of new products for sale. The Workflow starts when a product is inbounded at your warehouse. Then, tasks can kick off with taking pack shots, writing titles and descriptions, translating copy, and merchandizing the product. As each task is completed, the Workflow can proceed. All tasks would be mapped as Workflow Steps and could be completed in systems across your stack. If a task fails to complete or a configurable timeout is reached, rollback logic can help keep your data consistent or notify responsible parties.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tsx
const workflowId = "prepare-products-for-sale"
const prepareProductsForSale = createWorkflow(workflowId, function (input) {
  awaitPackShotsApprovals() // async, requires human-in-the-loop
  merchandizeProducts() // async, requires human-in-the-loop
  publishProducts()
})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Workflows are not built specifically for commerce operations. Whenever your stack has multiple systems interfacing with each other, Workflows is a useful primitive. For example, we use Workflows to provision infrastructure for Medusa Cloud, which comprises a range of long-running asynchronous operations across many systems, including third-party services.&lt;/p&gt;
&lt;p&gt;Read more about &lt;a href="https://docs.medusajs.com/v2/learn/advanced-development/workflows/long-running-workflow"&gt;Durable Workflows in our documentation&lt;/a&gt;. &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Query&lt;/h2&gt;
&lt;p&gt;Similar to how Workflows tie together cross-domain logic, we have had to rethink the query mechanism in Medusa 2.0. We can no longer expand relations with traditional ORM tooling, as those relations (across domains) no longer exist. &lt;/p&gt;
&lt;p&gt;We are excited to introduce Query in Medusa 2.0. Initially, Query replaces the mechanism for expanding cross-domain relations. In the future, we plan to improve the query engine to make it an immensely powerful tool for working with data in your application, more on that later.&lt;/p&gt;
&lt;p&gt;```tsx
const query = container.resolve("query")&lt;/p&gt;
&lt;p&gt;const { data } = query.graph({
  entity: "product",
  fields: ["id", "brand.*"]
})&lt;/p&gt;
&lt;p&gt;// console.log(data[0])
// { id: "prod_1234", brand: { id: "br_1234", name: "Medusa Running" } }
```&lt;/p&gt;
&lt;p&gt;Upon booting your Medusa application, our loaders read all modules in your application and identify data models and links between data models. This information is used to build an internal graph representation of the data living within your application. Query uses this graph to query data across modules. &lt;/p&gt;
&lt;p&gt;Read more about &lt;a href="https://docs.medusajs.com/v2/learn/advanced-development/module-links/query"&gt;Query in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Admin redesign&lt;/h2&gt;
&lt;p&gt;We are incredibly excited to present a fully redesigned admin dashboard in Medusa 2.0. The dashboard has been rewritten from scratch and introduces new UI and UX across all domains. &lt;/p&gt;
&lt;p&gt;Explore the redesign in our demo here.&lt;/p&gt;
&lt;p&gt;Aside from being redesigned, our dashboard is more customizable than ever. You can add custom UI Widgets and Routes to support your bespoke business workflows and get the full picture of your commerce operation.&lt;/p&gt;
&lt;p&gt;```tsx
import { defineWidgetConfig } from "@medusajs/admin-sdk"
import { Container, Heading } from "@medusajs/ui"&lt;/p&gt;
&lt;p&gt;const ProductWidget = () =&amp;gt; {
  return (
    &lt;Container className="divide-y p-0"&gt;
      &lt;div className="flex items-center justify-between px-6 py-4"&gt;
        &lt;Heading level="h2"&gt;Product Widget&lt;/Heading&gt;
      &lt;/div&gt;
    &lt;/Container&gt;
  )
}&lt;/p&gt;
&lt;p&gt;export const config = defineWidgetConfig({
  zone: "product.details.before",
})
```&lt;/p&gt;
&lt;p&gt;Finally, the admin build tooling has been migrated to Vite to improve the developer experience and gain access to a thriving ecosystem of developers and plugins. &lt;/p&gt;
&lt;p&gt;Read more about &lt;a href="https://docs.medusajs.com/v2/learn/advanced-development/admin"&gt;Admin in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Framework for customization&lt;/h2&gt;
&lt;p&gt;Lastly, we are excited to announce our fully-fledged backend framework for building powerful customizations in Medusa applications. We’ve already covered many of the framework's tools in previous sections, so the following is a rundown of the tools not mentioned in previous sections.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API Routes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Expose endpoints in your Medusa application with API Routes, allowing you to run custom business logic, listen to webhooks, and more.&lt;/p&gt;
&lt;p&gt;```tsx
export const POST = async (req, res) =&amp;gt; {
  const query = req.scope.resolve("query")&lt;/p&gt;
&lt;p&gt;const { data } = query.graph({
    entity: "product",
    fields: ["id", "brand.*"]
  })&lt;/p&gt;
&lt;p&gt;res.json({ product: data[0] })
}
```&lt;/p&gt;
&lt;p&gt;Read more about &lt;a href="https://docs.medusajs.com/v2/learn/basics/api-routes"&gt;API Routes in our documentation&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Subscribers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use Medusa’s built-in event system to subscribe and respond to events like &lt;code&gt;order.placed&lt;/code&gt;, &lt;code&gt;product.created&lt;/code&gt;, and more with Subscribers.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;``tsx
export default async function productCreateHandler({ event }) {
  const productId = event.data.id
  console.log(&lt;/code&gt;The product ${productId} was created`)
}&lt;/p&gt;
&lt;p&gt;export const config: SubscriberConfig = {
  event: "product.created",
}
```&lt;/p&gt;
&lt;p&gt;Read more about &lt;a href="https://docs.medusajs.com/v2/learn/basics/events-and-subscribers"&gt;Subscribers in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scheduled Jobs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Perform scheduled jobs to automate repetitive work on a recurring basis.&lt;/p&gt;
&lt;p&gt;```tsx
import { syncProductsWorkflow } from "@workflows"&lt;/p&gt;
&lt;p&gt;export default function syncProductsJob({ container }) {&lt;/p&gt;
&lt;p&gt;await syncProductsWorkflow.run(container)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;export const config = {
  name: "sync-products-midnight",
  schedule: "0 0 * &lt;em&gt; &lt;/em&gt;",
}
```&lt;/p&gt;
&lt;p&gt;Read more about &lt;a href="https://docs.medusajs.com/v2/learn/basics/scheduled-jobs"&gt;Scheduled Jobs in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Middlewares&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Introduce middleware functions with our new &lt;code&gt;defineMiddlewares&lt;/code&gt; utility.&lt;/p&gt;
&lt;p&gt;```tsx
// src/api/middleswares.ts&lt;/p&gt;
&lt;p&gt;import { defineMiddlewares } from "@medusajs/medusa"&lt;/p&gt;
&lt;p&gt;export default defineMiddlewares({
  routes: [
    {
      matcher: "/custom*",
      middlewares: [
        (req, res, next) =&amp;gt; {
          console.log("Received a request!")
          next()
        },
      ],
    },
  ],&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Read more about &lt;a href="https://docs.medusajs.com/v2/learn/advanced-development/api-routes/middlewares"&gt;middleware in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Medusa Config&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Configure your Medusa server at ease with our new type-safe helper in &lt;code&gt;medusa-config.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;```tsx
import { defineConfig, loadEnv } from "@medusajs/framework/utils";&lt;/p&gt;
&lt;p&gt;loadEnv(process.env.NODE_ENV || "development", process.cwd());&lt;/p&gt;
&lt;p&gt;module.exports = defineConfig({
  projectConfig: {
    databaseUrl: process.env.DATABASE_URL,
    redisUrl: process.env.REDIS_URL,
    http: {
      storeCors: process.env.STORE_CORS!,
      adminCors: process.env.ADMIN_CORS!,
      authCors: process.env.AUTH_CORS!,
      jwtSecret: process.env.JWT_SECRET,
      cookieSecret: process.env.COOKIE_SECRET,
    },
  },
});
```&lt;/p&gt;
&lt;p&gt;Additionally, we’ve added TypeScript support to allow converting the config file to a ts-file.&lt;/p&gt;
&lt;p&gt;As described in previous sections, our framework also includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data Modeling Language (DML)&lt;/li&gt;
&lt;li&gt;Modules&lt;/li&gt;
&lt;li&gt;Workflows&lt;/li&gt;
&lt;li&gt;Query&lt;/li&gt;
&lt;li&gt;UI library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more about our &lt;a href="https://docs.medusajs.com/v2/learn/customization"&gt;Framework in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;strong&gt;Upgrading to Medusa 2.0&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;An upgrade guide with step-by-step instructions and a full list of breaking changes will be published within the following months.&lt;/p&gt;</content>
    <link href="https://github.com/medusajs/medusa/releases/tag/v2.0.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/medusajs/medusa/releases/tag/v2.0.0-rc.8</id>
    <title>New release for Medusa: Medusa 2.0 Release Candidate #8</title>
    <updated>2024-10-22T12:16:39-04:00</updated>
    <author>
      <name>medusajs/medusa</name>
    </author>
    <content>&lt;!-- 
![image](https://github.com/user-attachments/assets/348f5ba2-088b-4f8f-88ae-65ef39bd80df)

# Medusa v2.0 Release Candidate #8

CMS_BREAK --&gt;

&lt;h2&gt;Get started with a new project&lt;/h2&gt;
&lt;p&gt;To get started using the RC, run the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
npx create-medusa-app@rc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This command will create a new Medusa project with our redesigned admin and a 2.0-compatible Next.js storefront. The Medusa application and the Next.js storefront are separate projects in separate folders.&lt;/p&gt;
&lt;h2&gt;Update existing project&lt;/h2&gt;
&lt;p&gt;Ensure your &lt;strong&gt;Medusa&lt;/strong&gt; dependencies in &lt;code&gt;package.json&lt;/code&gt; are using the &lt;code&gt;rc&lt;/code&gt; tag:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
  "dependencies": {
    "@medusajs/admin-sdk": "rc",
    "@medusajs/framework": "rc",
    "@medusajs/medusa": "rc",
    "@medusajs/medusa-cli": "rc",
    ...
  }
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To ensure an upgrade to a new version is completed correctly, run the following sequence of commands:&lt;/p&gt;
&lt;p&gt;```tsx
rm -rf node_modules
rm yarn.lock // or package-lock.json&lt;/p&gt;
&lt;p&gt;yarn // If you are using yarn berry, you need to create the lock-file first
```&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;fix(medusa, types): allow to pass &lt;code&gt;external_id&lt;/code&gt; on product create/update by @fPolic in https://github.com/medusajs/medusa/pull/9694&lt;/li&gt;
&lt;li&gt;feat(dashboard,types): Translate all OrderBy filters by @kasperkristensen in https://github.com/medusajs/medusa/pull/9691&lt;/li&gt;
&lt;li&gt;feat(core-flows): order events by @carlos-r-l-rodrigues in https://github.com/medusajs/medusa/pull/9702&lt;/li&gt;
&lt;li&gt;feat(core-flows,medusa): Add customer validation on cart update by @riqwan in https://github.com/medusajs/medusa/pull/9662&lt;/li&gt;
&lt;li&gt;Feat/validate query enhancement by @adrien2p in https://github.com/medusajs/medusa/pull/9705&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bugs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;fix(dashboard,js-sdk): remove method and hook for deleting claim by @shahednasser in https://github.com/medusajs/medusa/pull/9668&lt;/li&gt;
&lt;li&gt;fix(dashboard, js-sdk): undefined RMA activity items by @fPolic in https://github.com/medusajs/medusa/pull/9649&lt;/li&gt;
&lt;li&gt;fix(core-flows): Emit event in update products workflow by @olivermrbl in https://github.com/medusajs/medusa/pull/9682&lt;/li&gt;
&lt;li&gt;fix(dashboard): wrong queryKey for price preferences list by @fPolic in https://github.com/medusajs/medusa/pull/9685&lt;/li&gt;
&lt;li&gt;fix(dasboard): Grammer issues on invite page by @kasperkristensen in https://github.com/medusajs/medusa/pull/9683&lt;/li&gt;
&lt;li&gt;fix: allow additional_data to be undefined or null by @thetutlage in https://github.com/medusajs/medusa/pull/9687&lt;/li&gt;
&lt;li&gt;fix(product): Category repository missing ontext by @adrien2p in https://github.com/medusajs/medusa/pull/9688&lt;/li&gt;
&lt;li&gt;fix(dashboard,js-sdk): remove methods / hooks to non existing exchange routes by @shahednasser in https://github.com/medusajs/medusa/pull/9697&lt;/li&gt;
&lt;li&gt;fix: Don't store token in SDK by default by @sradevski in https://github.com/medusajs/medusa/pull/9704&lt;/li&gt;
&lt;li&gt;fix(admin-vite-plugin,dashboard): Generate correct UI Route tree by @kasperkristensen in https://github.com/medusajs/medusa/pull/9699&lt;/li&gt;
&lt;li&gt;fix(dashboard): temp hide order column on reservations by @fPolic in https://github.com/medusajs/medusa/pull/9692&lt;/li&gt;
&lt;li&gt;fix(dashboard): broken CustomerGroup create form by @fPolic in https://github.com/medusajs/medusa/pull/9711&lt;/li&gt;
&lt;li&gt;fix(dasbhoard): Revert keybound form for public pages by @kasperkristensen in https://github.com/medusajs/medusa/pull/9710&lt;/li&gt;
&lt;li&gt;fix: API validation management issues by @adrien2p in https://github.com/medusajs/medusa/pull/9693&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;docs: rename packages by @shahednasser in https://github.com/medusajs/medusa/pull/9618&lt;/li&gt;
&lt;li&gt;docs-util: fixes to package renames + other options by @shahednasser in https://github.com/medusajs/medusa/pull/9671&lt;/li&gt;
&lt;li&gt;docs: fix scroll + divider issues by @shahednasser in https://github.com/medusajs/medusa/pull/9663&lt;/li&gt;
&lt;li&gt;fix: revise words on docs intro page by @srindom in https://github.com/medusajs/medusa/pull/9588&lt;/li&gt;
&lt;li&gt;docs: update nav items by @shahednasser in https://github.com/medusajs/medusa/pull/9709&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Chores&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;chore(utils): update tsdocs for provider identifiers by @shahednasser in https://github.com/medusajs/medusa/pull/9656&lt;/li&gt;
&lt;li&gt;chore(orchestration): modules method context by @carlos-r-l-rodrigues in https://github.com/medusajs/medusa/pull/9669&lt;/li&gt;
&lt;li&gt;chore: fix to DML action by @shahednasser in https://github.com/medusajs/medusa/pull/9672&lt;/li&gt;
&lt;li&gt;chore(types,js-sdk,medusa): Add TSDocs for store and auth's JS SDK + small type fixes by @shahednasser in https://github.com/medusajs/medusa/pull/9657&lt;/li&gt;
&lt;li&gt;chore: Correctly assert test by @sradevski in https://github.com/medusajs/medusa/pull/9695&lt;/li&gt;
&lt;li&gt;chore(js-sdk,types): add tsdocs for admin JS SDK methods [1/n] by @shahednasser in https://github.com/medusajs/medusa/pull/9667&lt;/li&gt;
&lt;li&gt;chore(js-sdk,types): add tsdocs for admin JS SDK methods [2/n] by @shahednasser in https://github.com/medusajs/medusa/pull/9696&lt;/li&gt;
&lt;li&gt;chore(js-sdk,types): add tsdocs for admin JS SDK methods [3/n] by @shahednasser in https://github.com/medusajs/medusa/pull/9712&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: https://github.com/medusajs/medusa/compare/v2.0.0-rc.7...v2.0.0-rc.8&lt;/p&gt;</content>
    <link href="https://github.com/medusajs/medusa/releases/tag/v2.0.0-rc.8" rel="alternate"/>
  </entry>
</feed>
